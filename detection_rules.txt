{
  "gid": "2",
  "name": "dns_large_pkt",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 53) & (df['avg_pktlen'] > 200) & (( ~df['genome.src'].str.contains('kobekobz.today')) & ( ~df['genome.src'].str.contains('xvpn.io'))) & (( ~df['genome.src'].str.contains('root-servers.net'))) & (( ~df['genome.src'].str.contains('gtld-servers.net')) & ( ~df['genome.src'].str.contains('gov.stld')) & ( ~df['genome.src'].str.contains('int.stld')) & ( ~df['genome.src'].str.contains('mil.stld')) & ( ~df['genome.src'].str.contains('biz.gtld'))) & (( ~df['genome.src'].str.contains('co.cctld')) & ( ~df['genome.src'].str.contains('kr.cctld')) & ( ~df['genome.src'].str.contains('fr.cctld')) & ( ~df['genome.src'].str.contains('us.cctld')) & ( ~df['genome.src'].str.contains('cn.cctld')) & ( ~df['genome.src'].str.contains('tk.cctld')) & ( ~df['genome.src'].str.contains('uk.cctld')) & ( ~df['genome.src'].str.contains('ru.cctld')) & ( ~df['genome.src'].str.contains('de.cctld')) & ( ~df['genome.src'].str.contains('nl.cctld')) & ( ~df['genome.src'].str.contains('br.cctld')) & ( ~df['genome.src'].str.contains('jp.cctld')) & ( ~df['genome.src'].str.contains('au.cctld')) & ( ~df['genome.src'].str.contains('eu.cctld')) & ( ~df['genome.src'].str.contains('it.cctld')) & ( ~df['genome.src'].str.contains('ca.cctld')) & ( ~df['genome.src'].str.contains('pl.cctld')) & ( ~df['genome.src'].str.contains('lt.cctld')) & ( ~df['genome.src'].str.contains('fi.cctld')) & ( ~df['genome.src'].str.contains('at.cctld')) & ( ~df['genome.src'].str.contains('es.cctld')) & ( ~df['genome.src'].str.contains('se.cctld')) & ( ~df['genome.src'].str.contains('in.cctld')) & ( ~df['genome.src'].str.contains('id.cctld')) & ( ~df['genome.src'].str.contains('za.cctld')) & ( ~df['genome.src'].str.contains('ai.cctld'))) & (( ~df['genome.src'].str.contains('dns.charter.com')) & ( ~df['genome.src'].str.contains('doh.charter.com')) & ( ~df['genome.src'].str.contains('ns.google.com')) & ( ~df['genome.src'].str.contains('ns.cloudflare.com')) & ( ~df['genome.src'].str.contains('ns.apple.com')) & ( ~df['genome.src'].str.contains('route53.amazonaws.com')) & ( ~df['genome.src'].str.contains('dns.akamai.net')) & ( ~df['genome.src'].str.contains('dns.azure.com')) & ( ~df['genome.src'].str.contains('dns.fastly.com')) & ( ~df['genome.src'].str.contains('dns.amazonaws.com')) & ( ~df['genome.src'].str.contains('dns.microsoft.com')) & ( ~df['genome.src'].str.contains('ns.alibaba.com')) & ( ~df['genome.src'].str.contains('dns.totalplay.com')) & ( ~df['genome.src'].str.contains('dns.linode.com')) & ( ~df['genome.src'].str.contains('ns.bouyguestelecom.fr')) & ( ~df['genome.src'].str.contains('dns.continent8.com')) & ( ~df['genome.src'].str.contains('ns.lumen.com')) & ( ~df['genome.src'].str.contains('dns.ntt.com')) & ( ~df['genome.src'].str.contains('dns.fdn.fr')) & ( ~df['genome.src'].str.contains('ns.skbroadband.com')) & ( ~df['genome.src'].str.contains('ns.uplus.co.kr')) & ( ~df['genome.src'].str.contains('dns.elisa.com')) & ( ~df['genome.src'].str.contains('ns.windstream.com')))",
  "comment": "Large DNS packets (>200) bytes are rare -- especially from unfamiliar DNS resolvers (i.e. not Comcast DNS, BT DNS, Google, etc)",
  "order": "1100",
  "tag": "",
  "ddos_type": "dns",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "3",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 53) & (df['avg_pktlen'] > 200) & (~df['genome.src'].isin([ GENOME_EXCEPTION_DNS_LARGE_PKT ])) & (~df['genome.src'].isin([ GENOME_DNS_ROOT ])) & (~df['genome.src'].isin([ GENOME_DNS_GTLD ])) & (~df['genome.src'].isin([ GENOME_DNS_CCTLD ])) & (~df['genome.src'].isin([ GENOME_DNS_NAMESERVERS ]))",
  "position_id": 2,
  "display_name": "dns_large_pkt"
}{
  "gid": "4",
  "name": "protocol_flood_v4",
  "dfmatch": "(df['ip_version'] == 4) & (~df['protocol'].isin([1,4,6,17,41,47,50,51,115]))",
  "comment": "Random protocol flood (e.g. attack https://library.deepfield.net/attack/170)",
  "order": "3800",
  "tag": "",
  "ddos_type": "protocolflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "22",
  "dfmatch_orig": "(df['ip_version'] == 4) & (~df['protocol'].isin([1,4,6,17,41,47,50,51,115]))",
  "position_id": 4,
  "display_name": "protocol_flood_v4"
}{
  "gid": "5",
  "name": "other_fragment_udp",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 0)",
  "comment": "Classify all other UDP fragments as DDoS. 1136 interesting example where only dst UDP port is zero",
  "order": "3350",
  "tag": "",
  "ddos_type": "fragment",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "50000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 0)",
  "position_id": 5,
  "display_name": "other_fragment_udp"
}{
  "gid": "6",
  "name": "dns_distant_ttl",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 53) & ((df['ttl'] > 1) & (df['ttl'] <50))",
  "comment": "",
  "order": "1150",
  "tag": "",
  "ddos_type": "dns",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "50",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 53) & ((df['ttl'] > 1) & (df['ttl'] <50))",
  "position_id": 6,
  "display_name": "dns_distant_ttl"
}{
  "gid": "7",
  "name": "tcpflood_xmas_flags",
  "dfmatch": "((df['protocol'] == 6) & (df['tcpflags'].isin([TCP_NONE, TCP_U, TCP_P, TCP_F, TCP_SR, TCP_SP, TCP_FRA, TCP_FRPA, TCP_FSPA, TCP_FSRPA, TCP_FSRPAU])))",
  "comment": "",
  "order": "4100",
  "tag": "",
  "ddos_type": "tcpflood",
  "threat_level": "5",
  "num_unique_src_per_dst_24": "200",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "",
  "dfmatch_orig": "((df['protocol'] == 6) & (df['tcpflags'].isin([GENOME_SUSPECT_TCPFLAGS_BASE])))",
  "position_id": 7,
  "display_name": "tcpflood_xmas_flags"
}{
  "gid": "8",
  "name": "flood_distant_ttl",
  "dfmatch": "(((df['ttl'] > 0) & (df['ttl'] < 51)) | ((df['ttl'] > 66) & (df['ttl'] < 115)) | ((df['ttl'] > 128) & (df['ttl'] < 247))) & (~df['protocol'].isin([4,47,50])) & (( ~df['genome.src'].str.contains('apple.com')) & ( ~df['genome.src'].str.contains('facebook.com')) & ( ~df['genome.src'].str.contains('amazonaws.com')) & ( ~df['genome.src'].str.contains('cloudfront.com')) & ( ~df['genome.src'].str.contains('fbcdn.net')) & ( ~df['genome.src'].str.contains('continent8.com')) & ( ~df['genome.src'].str.contains('office.microsoft.com')) & ( ~df['genome.src'].str.contains('teams.microsoft.com')) & ( ~df['genome.src'].str.contains('torrent')) & ( ~df['genome.src'].str.contains('likely_vpn')) & ( ~df['genome.src'].str.contains('catonetworks.com')) & ( ~df['genome.src'].str.contains('google.com')) & ( ~df['genome.src'].str.contains('defense.gov')) & ( ~df['genome.src'].str.contains('blob.azure.com')) & ( ~df['genome.src'].str.contains('azure.com')) & ( ~df['genome.src'].str.contains('sharepoint.microsoft.com')) & ( ~df['genome.src'].str.contains('citrix.com')) & ( ~df['genome.src'].str.contains('360learning.com')) & ( ~df['genome.src'].str.contains('vpn.cloudflare.com')))  & (( ~df['genome.dst'].str.contains('facebook.com')) & ( ~df['genome.dst'].str.contains('fbcdn.net')) & ( ~df['genome.dst'].str.contains('continent8.com')) & ( ~df['genome.dst'].str.contains('playtech.com')) & ( ~df['genome.dst'].str.contains('igt.com')) & ( ~df['genome.dst'].str.contains('gamesyscorporate.com')) & ( ~df['genome.dst'].str.contains('apricot.co.im')) & ( ~df['genome.dst'].str.contains('google.com')) & ( ~df['genome.dst'].str.contains('cloudflare.com')) & ( ~df['genome.dst'].str.contains('vysiion.exponential-e.com')) & ( ~df['genome.dst'].str.contains('time.nist.gov')) & ( ~df['genome.dst'].str.contains('voip.windstream.com')) & ( ~df['genome.dst'].str.contains('anyconnect')) & ( ~df['genome.dst'].str.contains('balticservers.com')) & ( ~df['genome.dst'].str.contains('arkansas.gov')) & ( ~df['genome.dst'].str.contains('discord.com')) & ( ~df['genome.dst'].str.contains('telegram.org')) & ( ~df['genome.dst'].str.contains('connect_secure')) & ( ~df['genome.dst'].str.contains('meraki'))) & (~df['port.src'].isin([4500])) & (~df['port.dst'].isin([9350])) & (( ~df['genome.src'].str.contains('root-servers.net'))) & (( ~df['genome.src'].str.contains('gtld-servers.net')) & ( ~df['genome.src'].str.contains('gov.stld')) & ( ~df['genome.src'].str.contains('int.stld')) & ( ~df['genome.src'].str.contains('mil.stld')) & ( ~df['genome.src'].str.contains('biz.gtld'))) & (( ~df['genome.src'].str.contains('co.cctld')) & ( ~df['genome.src'].str.contains('kr.cctld')) & ( ~df['genome.src'].str.contains('fr.cctld')) & ( ~df['genome.src'].str.contains('us.cctld')) & ( ~df['genome.src'].str.contains('cn.cctld')) & ( ~df['genome.src'].str.contains('tk.cctld')) & ( ~df['genome.src'].str.contains('uk.cctld')) & ( ~df['genome.src'].str.contains('ru.cctld')) & ( ~df['genome.src'].str.contains('de.cctld')) & ( ~df['genome.src'].str.contains('nl.cctld')) & ( ~df['genome.src'].str.contains('br.cctld')) & ( ~df['genome.src'].str.contains('jp.cctld')) & ( ~df['genome.src'].str.contains('au.cctld')) & ( ~df['genome.src'].str.contains('eu.cctld')) & ( ~df['genome.src'].str.contains('it.cctld')) & ( ~df['genome.src'].str.contains('ca.cctld')) & ( ~df['genome.src'].str.contains('pl.cctld')) & ( ~df['genome.src'].str.contains('lt.cctld')) & ( ~df['genome.src'].str.contains('fi.cctld')) & ( ~df['genome.src'].str.contains('at.cctld')) & ( ~df['genome.src'].str.contains('es.cctld')) & ( ~df['genome.src'].str.contains('se.cctld')) & ( ~df['genome.src'].str.contains('in.cctld')) & ( ~df['genome.src'].str.contains('id.cctld')) & ( ~df['genome.src'].str.contains('za.cctld')) & ( ~df['genome.src'].str.contains('ai.cctld'))) & (( ~df['genome.src'].str.contains('dns.charter.com')) & ( ~df['genome.src'].str.contains('doh.charter.com')) & ( ~df['genome.src'].str.contains('ns.google.com')) & ( ~df['genome.src'].str.contains('ns.cloudflare.com')) & ( ~df['genome.src'].str.contains('ns.apple.com')) & ( ~df['genome.src'].str.contains('route53.amazonaws.com')) & ( ~df['genome.src'].str.contains('dns.akamai.net')) & ( ~df['genome.src'].str.contains('dns.azure.com')) & ( ~df['genome.src'].str.contains('dns.fastly.com')) & ( ~df['genome.src'].str.contains('dns.amazonaws.com')) & ( ~df['genome.src'].str.contains('dns.microsoft.com')) & ( ~df['genome.src'].str.contains('ns.alibaba.com')) & ( ~df['genome.src'].str.contains('dns.totalplay.com')) & ( ~df['genome.src'].str.contains('dns.linode.com')) & ( ~df['genome.src'].str.contains('ns.bouyguestelecom.fr')) & ( ~df['genome.src'].str.contains('dns.continent8.com')) & ( ~df['genome.src'].str.contains('ns.lumen.com')) & ( ~df['genome.src'].str.contains('dns.ntt.com')) & ( ~df['genome.src'].str.contains('dns.fdn.fr')) & ( ~df['genome.src'].str.contains('ns.skbroadband.com')) & ( ~df['genome.src'].str.contains('ns.uplus.co.kr')) & ( ~df['genome.src'].str.contains('dns.elisa.com')) & ( ~df['genome.src'].str.contains('ns.windstream.com')))",
  "comment": "Added exclusion for protocol 4 for https://deepfield.atlassian.net/browse/GEN-268",
  "order": "4900",
  "tag": "",
  "ddos_type": "spoofed",
  "threat_level": "1",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "10000",
  "bps_per_dst_24": "50000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(((df['ttl'] > 0) & (df['ttl'] < 51)) | ((df['ttl'] > 66) & (df['ttl'] < 115)) | ((df['ttl'] > 128) & (df['ttl'] < 247))) & (~df['protocol'].isin([4,47,50])) & (~df['genome.src'].isin([ GENOME_EXCEPTION_TTL ]))  & (~df['genome.dst'].isin([ GENOME_EXCEPTION_TTL_DST ])) & (~df['port.src'].isin([4500])) & (~df['port.dst'].isin([9350])) & (~df['genome.src'].isin([ GENOME_DNS_ROOT ])) & (~df['genome.src'].isin([ GENOME_DNS_GTLD ])) & (~df['genome.src'].isin([ GENOME_DNS_CCTLD ])) & (~df['genome.src'].isin([ GENOME_DNS_NAMESERVERS ]))",
  "position_id": 8,
  "display_name": "flood_distant_ttl"
}{
  "gid": "9",
  "name": "botnet",
  "dfmatch": "(df['protocol'].isin([6,17])) & (df['genome.src'].str.contains('ddosbot')) & (( ~df['genome.dst'].str.contains('ookla.com')) & ( ~df['genome.dst'].str.contains('fastly.com')) & ( ~df['genome.dst'].str.contains('akamai.net')) & ( ~df['genome.dst'].str.contains('stackpath.com')) & ( ~df['genome.dst'].str.contains('edg.io')) & ( ~df['genome.dst'].str.contains('facebook.com')) & ( ~df['genome.dst'].str.contains('tiktok.com')) & ( ~df['genome.dst'].str.contains('openconnect.netflix.com')) & ( ~df['genome.dst'].str.contains('instagram.com')) & ( ~df['genome.dst'].str.contains('google.com')) & ( ~df['genome.dst'].str.contains('apple.com')) & ( ~df['genome.dst'].str.contains('icloud.apple.com')) & ( ~df['genome.dst'].str.contains('cloudcctv.uplus.co.kr')) & ( ~df['genome.dst'].str.contains('discord.com')) & ( ~df['genome.dst'].str.contains('roblox.com')) & ( ~df['genome.dst'].str.contains('alphonso.tv')) & ( ~df['genome.dst'].str.contains('cdn.flow.com.ar')) & ( ~df['genome.dst'].str.contains('telegram.org')))",
  "comment": "",
  "order": "3150",
  "tag": "",
  "ddos_type": "botnet",
  "threat_level": "4",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'].isin([6,17])) & (df['genome.src'].isin([GENOME_BOTNET])) & (~df['genome.dst'].isin([GENOME_EXCEPTION_BOTNET]))",
  "position_id": 9,
  "display_name": "botnet"
}{
  "gid": "10",
  "name": "proxy",
  "dfmatch": "(df['protocol'].isin([6,17]) & (df['genome.src'].str.contains('tunnelbear.com') | df['genome.src'].str.contains('tor') | df['genome.src'].str.contains('sshplus') | df['genome.src'].str.contains('finevpn.org') | df['genome.src'].str.contains('nordvpn.com') | df['genome.src'].str.contains('torservers.net') | df['genome.src'].str.contains('surfeasy.com') | df['genome.src'].str.contains('hidemyass.com') | df['genome.src'].str.contains('cyberghostvpn.com') | df['genome.src'].str.contains('mullvad.net') | df['genome.src'].str.contains('vpn.opera.com') | df['genome.src'].str.contains('vpn.f-secure.com') | df['genome.src'].str.contains('surfshark.com') | df['genome.src'].str.contains('torproject.org') | df['genome.src'].str.contains('urban-vpn.com') | df['genome.src'].str.contains('unblock-us.com') | df['genome.src'].str.contains('vpn.avira.com') | df['genome.src'].str.contains('hide.me') | df['genome.src'].str.contains('airvpn.org') | df['genome.src'].str.contains('ovpn.com') | df['genome.src'].str.contains('fastestvpn.com') | df['genome.src'].str.contains('vpnunlimitedapp.com') | df['genome.src'].str.contains('ipvanish.com') | df['genome.src'].str.contains('pango.co') | df['genome.src'].str.contains('brightdata.com') | df['genome.src'].str.contains('soax.com') | df['genome.src'].str.contains('expressvpn.com') | df['genome.src'].str.contains('allsafevpn.com') | df['genome.src'].str.contains('ltesocks.xyz') | df['genome.src'].str.contains('proxylist') | df['genome.src'].str.contains('squid_cve') | df['genome.src'].str.contains('windscribe.com') | df['genome.src'].str.contains('possible_proxy') | df['genome.src'].str.contains('privateinternetaccess.com') | df['genome.src'].str.contains('touchvpn.net'))) & (~df['genome.src'].str.contains('tor') & ~df['genome.src'].str.contains('proxygen')) & (( ~df['genome.dst'].str.contains('tor')) & ( ~df['genome.dst'].str.contains('telegram.org')))",
  "comment": "",
  "order": "3750",
  "tag": "",
  "ddos_type": "botnet",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'].isin([6,17]) & (df['genome.src'].isin([ GENOME_PROXY_ABUSE ]))) & (~df['genome.src'].isin([ GENOME_EXCEPTION_PROXY_SRC ])) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_PROXY_DST ]))",
  "position_id": 10,
  "display_name": "proxy"
}{
  "gid": "12",
  "name": "flood_defense_gov",
  "dfmatch": "df['origin_asn.src'].isin([275, 367, 721, 722, 724, 726, 732, 749])",
  "comment": "SEC-572 - Updated origin_asn.src referencing GENOME_DOD",
  "order": "4750",
  "tag": "",
  "ddos_type": "spoofed",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "df['origin_asn.src'].isin([275, 367, 721, 722, 724, 726, 732, 749])",
  "position_id": 12,
  "display_name": "flood_defense_gov"
}{
  "gid": "13",
  "name": "ntp_large_pkt",
  "dfmatch": "((df['protocol'] == 17) & (df['port.src'] == 123) & (df['avg_pktlen'] > 200))",
  "comment": "",
  "order": "1350",
  "tag": "",
  "ddos_type": "ntp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "4",
  "dfmatch_orig": "((df['protocol'] == 17) & (df['port.src'] == 123) & (df['avg_pktlen'] > 200))",
  "position_id": 13,
  "display_name": "ntp_large_pkt"
}{
  "gid": "14",
  "name": "ntp_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([0,123]))  &  (df['genome.src'].str.contains('ntp_monlist'))",
  "comment": "",
  "order": "1300",
  "tag": "",
  "ddos_type": "ntp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([0,123]))  &  (df['genome.src'].isin([GENOME_AMPLIFIER_NTP]))",
  "position_id": 14,
  "display_name": "ntp_amplifier"
}{
  "gid": "15",
  "name": "ntp_distant_ttl",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 123) & ((df['ttl'] > 1) & (df['ttl'] <50))",
  "comment": "",
  "order": "1400",
  "tag": "",
  "ddos_type": "ntp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "5,18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 123) & ((df['ttl'] > 1) & (df['ttl'] <50))",
  "position_id": 15,
  "display_name": "ntp_distant_ttl"
}{
  "gid": "16",
  "name": "tcpflood_null",
  "dfmatch": "((df['protocol'] == 6) & (df['tcpflags'] == TCP_NONE) ) & (~df['genome.src'].str.contains('ddos.cloudflare.com') & ~df['genome.src'].str.contains('prolexic.akamai.net') & ~df['genome.src'].str.contains('ddos.alibaba.com') & ~df['genome.src'].str.contains('stormwall.network') & ~df['genome.src'].str.contains('bgp.net') & ~df['genome.src'].str.contains('security.f5.com') & ~df['genome.src'].str.contains('cloudddos.com') & ~df['genome.src'].str.contains('ddos.voxility.net') & ~df['genome.src'].str.contains('cloud.radware.com') & ~df['genome.src'].str.contains('ddos.vercara.com') & ~df['genome.src'].str.contains('nexusguard.com') & ~df['genome.src'].str.contains('zscaler.com') & ~df['genome.src'].str.contains('ventryshield.net'))",
  "comment": "",
  "order": "4150",
  "tag": "",
  "ddos_type": "tcpflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "((df['protocol'] == 6) & (df['tcpflags'] == TCP_NONE) ) & (~df['genome.src'].isin([ GENOME_ANTIDDOS ]))",
  "position_id": 16,
  "display_name": "tcpflood_null"
}{
  "gid": "17",
  "name": "cldap_large_pkt",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 389) & (df['avg_pktlen'] > 200)",
  "comment": "",
  "order": "1500",
  "tag": "",
  "ddos_type": "cldap",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 389) & (df['avg_pktlen'] > 200)",
  "position_id": 17,
  "display_name": "cldap_large_pkt"
}{
  "gid": "19",
  "name": "anti-ddos",
  "dfmatch": "((df['protocol'] == 47) | ((df['protocol'] == 17) & (df['port.src'].isin([500,1701])))) & (df['genome.src'].str.contains('ddos.cloudflare.com') | df['genome.src'].str.contains('prolexic.akamai.net') | df['genome.src'].str.contains('ddos.alibaba.com') | df['genome.src'].str.contains('stormwall.network') | df['genome.src'].str.contains('bgp.net') | df['genome.src'].str.contains('security.f5.com') | df['genome.src'].str.contains('cloudddos.com') | df['genome.src'].str.contains('ddos.voxility.net') | df['genome.src'].str.contains('cloud.radware.com') | df['genome.src'].str.contains('ddos.vercara.com') | df['genome.src'].str.contains('nexusguard.com') | df['genome.src'].str.contains('zscaler.com') | df['genome.src'].str.contains('ventryshield.net'))",
  "comment": "Cloud Anti-DDoS Providers. List is still incomplete! Threat_level is intentionally 0 - not used.",
  "order": "1000",
  "tag": "",
  "ddos_type": "anti-ddos",
  "threat_level": "0",
  "num_unique_src_per_dst_24": "1",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "76",
  "dfmatch_orig": "((df['protocol'] == 47) | ((df['protocol'] == 17) & (df['port.src'].isin([500,1701])))) & (df['genome.src'].isin([ GENOME_ANTIDDOS ]))",
  "position_id": 19,
  "display_name": "anti-ddos"
}{
  "gid": "20",
  "name": "dns_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([53,0])) & (df['genome.src'].str.contains('dns_all')) & (( ~df['genome.src'].str.contains('doh.charter.com')) & ( ~df['genome.src'].str.contains('dns.google.com')) & ( ~df['genome.src'].str.contains('dns.cloudflare.com')) & ( ~df['genome.src'].str.contains('dns.apple.com')) & ( ~df['genome.src'].str.contains('dns.fortinet.com')) & ( ~df['genome.src'].str.contains('quad9.net')) & ( ~df['genome.src'].str.contains('ultradns.com')) & ( ~df['genome.src'].str.contains('dns.comcast.com')) & ( ~df['genome.src'].str.contains('dns.alibaba.com')) & ( ~df['genome.src'].str.contains('dns.baidu.com')) & ( ~df['genome.src'].str.contains('dns.windstream.com')) & ( ~df['genome.src'].str.contains('dns.verizon.com')) & ( ~df['genome.src'].str.contains('dns.mediacomcable.com')) & ( ~df['genome.src'].str.contains('dns.bouyguestelecom.fr')) & ( ~df['genome.src'].str.contains('dns.lumen.com')) & ( ~df['genome.src'].str.contains('dns.ntt.com')) & ( ~df['genome.src'].str.contains('dns.skbroadband.com')) & ( ~df['genome.src'].str.contains('dns.lgcns.com')) & ( ~df['genome.src'].str.contains('dns0.eu')) & ( ~df['genome.src'].str.contains('dns.uplus.co.kr'))) & (( ~df['genome.src'].str.contains('root-servers.net'))) & (( ~df['genome.src'].str.contains('gtld-servers.net')) & ( ~df['genome.src'].str.contains('gov.stld')) & ( ~df['genome.src'].str.contains('int.stld')) & ( ~df['genome.src'].str.contains('mil.stld')) & ( ~df['genome.src'].str.contains('biz.gtld'))) & (( ~df['genome.src'].str.contains('co.cctld')) & ( ~df['genome.src'].str.contains('kr.cctld')) & ( ~df['genome.src'].str.contains('fr.cctld')) & ( ~df['genome.src'].str.contains('us.cctld')) & ( ~df['genome.src'].str.contains('cn.cctld')) & ( ~df['genome.src'].str.contains('tk.cctld')) & ( ~df['genome.src'].str.contains('uk.cctld')) & ( ~df['genome.src'].str.contains('ru.cctld')) & ( ~df['genome.src'].str.contains('de.cctld')) & ( ~df['genome.src'].str.contains('nl.cctld')) & ( ~df['genome.src'].str.contains('br.cctld')) & ( ~df['genome.src'].str.contains('jp.cctld')) & ( ~df['genome.src'].str.contains('au.cctld')) & ( ~df['genome.src'].str.contains('eu.cctld')) & ( ~df['genome.src'].str.contains('it.cctld')) & ( ~df['genome.src'].str.contains('ca.cctld')) & ( ~df['genome.src'].str.contains('pl.cctld')) & ( ~df['genome.src'].str.contains('lt.cctld')) & ( ~df['genome.src'].str.contains('fi.cctld')) & ( ~df['genome.src'].str.contains('at.cctld')) & ( ~df['genome.src'].str.contains('es.cctld')) & ( ~df['genome.src'].str.contains('se.cctld')) & ( ~df['genome.src'].str.contains('in.cctld')) & ( ~df['genome.src'].str.contains('id.cctld')) & ( ~df['genome.src'].str.contains('za.cctld')) & ( ~df['genome.src'].str.contains('ai.cctld'))) & (( ~df['genome.src'].str.contains('dns.charter.com')) & ( ~df['genome.src'].str.contains('doh.charter.com')) & ( ~df['genome.src'].str.contains('ns.google.com')) & ( ~df['genome.src'].str.contains('ns.cloudflare.com')) & ( ~df['genome.src'].str.contains('ns.apple.com')) & ( ~df['genome.src'].str.contains('route53.amazonaws.com')) & ( ~df['genome.src'].str.contains('dns.akamai.net')) & ( ~df['genome.src'].str.contains('dns.azure.com')) & ( ~df['genome.src'].str.contains('dns.fastly.com')) & ( ~df['genome.src'].str.contains('dns.amazonaws.com')) & ( ~df['genome.src'].str.contains('dns.microsoft.com')) & ( ~df['genome.src'].str.contains('ns.alibaba.com')) & ( ~df['genome.src'].str.contains('dns.totalplay.com')) & ( ~df['genome.src'].str.contains('dns.linode.com')) & ( ~df['genome.src'].str.contains('ns.bouyguestelecom.fr')) & ( ~df['genome.src'].str.contains('dns.continent8.com')) & ( ~df['genome.src'].str.contains('ns.lumen.com')) & ( ~df['genome.src'].str.contains('dns.ntt.com')) & ( ~df['genome.src'].str.contains('dns.fdn.fr')) & ( ~df['genome.src'].str.contains('ns.skbroadband.com')) & ( ~df['genome.src'].str.contains('ns.uplus.co.kr')) & ( ~df['genome.src'].str.contains('dns.elisa.com')) & ( ~df['genome.src'].str.contains('ns.windstream.com')))",
  "comment": "",
  "order": "1050",
  "tag": "",
  "ddos_type": "dns",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "3,4",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([53,0])) & (df['genome.src'].isin([ GENOME_AMPLIFIER_DNS ])) & (~df['genome.src'].isin([ GENOME_PUBLIC_DNS ])) & (~df['genome.src'].isin([ GENOME_DNS_ROOT ])) & (~df['genome.src'].isin([ GENOME_DNS_GTLD ])) & (~df['genome.src'].isin([ GENOME_DNS_CCTLD ])) & (~df['genome.src'].isin([ GENOME_DNS_NAMESERVERS ]))",
  "position_id": 20,
  "display_name": "dns_amplifier"
}{
  "gid": "21",
  "name": "cldap_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([389,0])) & (df['genome.src'].str.contains('cldap'))",
  "comment": "",
  "order": "1450",
  "tag": "",
  "ddos_type": "cldap",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([389,0])) & (df['genome.src'].isin([GENOME_AMPLIFIER_CLDAP]))",
  "position_id": 21,
  "display_name": "cldap_amplifier"
}{
  "gid": "22",
  "name": "cldap_distant_ttl",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 389) & ((df['ttl'] > 1) & (df['ttl'] <50))",
  "comment": "",
  "order": "1550",
  "tag": "",
  "ddos_type": "cldap",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 389) & ((df['ttl'] > 1) & (df['ttl'] <50))",
  "position_id": 22,
  "display_name": "cldap_distant_ttl"
}{
  "gid": "23",
  "name": "ssdp_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([1900,0])) & (df['genome.src'].str.contains('ssdp'))",
  "comment": "",
  "order": "1650",
  "tag": "",
  "ddos_type": "ssdp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([1900,0])) & (df['genome.src'].isin([GENOME_AMPLIFIER_SSDP]))",
  "position_id": 23,
  "display_name": "ssdp_amplifier"
}{
  "gid": "24",
  "name": "tcpflood_syn_pkt_len_v4",
  "dfmatch": "(df['ip_version'] == 4) & (df['protocol'] == 6) & (df['tcpflags'].isin([TCP_S, TCP_SEC, TCP_SC, TCP_SE] )) & ((df['avg_pktlen'] < 40) | (df['avg_pktlen'] > 64))",
  "comment": "",
  "order": "3650",
  "tag": "",
  "ddos_type": "synflood",
  "threat_level": "100",
  "num_unique_src_per_dst_24": "1",
  "pps_per_dst_24": "1000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['ip_version'] == 4) & (df['protocol'] == 6) & (df['tcpflags'].isin([TCP_S, TCP_SEC, TCP_SC, TCP_SE] )) & ((df['avg_pktlen'] < 40) | (df['avg_pktlen'] > 64))",
  "position_id": 24,
  "display_name": "tcpflood_syn_pkt_len_v4"
}{
  "gid": "25",
  "name": "tcpflood_ecu",
  "dfmatch": "((df['protocol'] == 6) & (df['tcpflags'].isin([TCP_U, TCP_E, TCP_C])))",
  "comment": "",
  "order": "4250",
  "tag": "",
  "ddos_type": "tcpflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "((df['protocol'] == 6) & (df['tcpflags'].isin([TCP_U, TCP_E, TCP_C])))",
  "position_id": 25,
  "display_name": "tcpflood_ecu"
}{
  "gid": "26",
  "name": "udp_avg_pktlen_invariant_v4",
  "dfmatch": "(df['ip_version'] == 4) & (df['protocol'] == 17) & (df['addr.dst:num_udp_addr_src_unique'] > 100) & (df['avg_pktlen'] == df['addr.dst:udp_pktlen_invariant']) & ((df['port.dst'] != 123) | (~df['avg_pktlen'].isin([76]))) & ((~df['port.dst'].isin([80,443])) | (~df['avg_pktlen'].isin([1260,1280]))) & (~(df['genome.src'].str.contains('voip.windstream.com') | df['genome.src'].str.contains('voip.verizon.com') | df['genome.src'].str.contains('voip.charter.com') | df['genome.src'].str.contains('voip.level3.com') | df['genome.src'].str.contains('voip.comcast.com') | df['genome.src'].str.contains('voip.cogent.com') | df['genome.src'].str.contains('voip.evolveip.net') | df['genome.src'].str.contains('voip.tmobile.com') | df['genome.src'].str.contains('voip.telefonica.com') | df['genome.src'].str.contains('voip.att.com') | df['genome.src'].str.contains('peerlessnetwork.com') | df['genome.src'].str.contains('bandwidth.com') | df['genome.src'].str.contains('inteliquent.com') | df['genome.src'].str.contains('hypercube-llc.com') | df['genome.src'].str.contains('o1.com') | df['genome.src'].str.contains('382com.com') | df['genome.src'].str.contains('nos.com') | df['genome.src'].str.contains('excel.com') | df['genome.src'].str.contains('impacthostedpbx.com') | df['genome.src'].str.contains('aninetworks.com') | df['genome.src'].str.contains('vonage.com') | df['genome.src'].str.contains('brightlinkcom.com') | df['genome.src'].str.contains('idt.net') | df['genome.src'].str.contains('apple.com') | df['genome.src'].str.contains('google.com') | df['genome.src'].str.contains('facebook.com') | df['genome.dst'].str.contains('voip.windstream.com') | df['genome.dst'].str.contains('voip.verizon.com') | df['genome.dst'].str.contains('voip.charter.com') | df['genome.dst'].str.contains('voip.level3.com') | df['genome.dst'].str.contains('voip.comcast.com') | df['genome.dst'].str.contains('voip.cogent.com') | df['genome.dst'].str.contains('voip.evolveip.net') | df['genome.dst'].str.contains('voip.tmobile.com') | df['genome.dst'].str.contains('voip.telefonica.com') | df['genome.dst'].str.contains('voip.att.com') | df['genome.dst'].str.contains('peerlessnetwork.com') | df['genome.dst'].str.contains('bandwidth.com') | df['genome.dst'].str.contains('inteliquent.com') | df['genome.dst'].str.contains('hypercube-llc.com') | df['genome.dst'].str.contains('o1.com') | df['genome.dst'].str.contains('382com.com') | df['genome.dst'].str.contains('nos.com') | df['genome.dst'].str.contains('excel.com') | df['genome.dst'].str.contains('impacthostedpbx.com') | df['genome.dst'].str.contains('aninetworks.com') | df['genome.dst'].str.contains('vonage.com') | df['genome.dst'].str.contains('brightlinkcom.com') | df['genome.dst'].str.contains('idt.net') | df['genome.dst'].str.contains('apple.com') | df['genome.dst'].str.contains('google.com') | df['genome.dst'].str.contains('facebook.com') | df['genome.dst'].str.contains('proxy') | df['genome.dst'].str.contains('socksproxy') | df['genome.dst'].str.contains('hatunnel') | df['genome.dst'].str.contains('softether') | df['genome.dst'].str.contains('likely_vpn') | df['genome.dst'].str.contains('anyconnect') | df['genome.dst'].str.contains('catonetworks.com') | df['genome.dst'].str.contains('f5_bigip') | df['genome.dst'].str.contains('sonicwall') | df['genome.dst'].str.contains('vpn.samsung.com') | df['genome.dst'].str.contains('squid') | df['genome.dst'].str.contains('citrix') | df['genome.dst'].str.contains('fortinet') | df['genome.dst'].str.contains('connect_secure'))) & (~df['avg_pktlen'].isin([1420,1500,200])) & ((~df['genome.src'].str.contains('easyvpn.biz') & ~df['genome.src'].str.contains('solana.com')) | (~df['avg_pktlen'].isin([1364,1077,1087]))) & ((( ~df['genome.dst'].str.contains('roblox.com')) & ( ~df['genome.dst'].str.contains('discord.com'))) | (~df['avg_pktlen'].isin([86])))",
  "comment": "GEN-445 add exception to known voip trunks\nGEN-527 add exception for QUIC, ports 80,443 with avg_pktlen of 1280 and 1260. \nSEC-2 add exception for genome destination google.com with avg_pktlen of 1278\nSEC-111 add exception for GENOME_DST_EXCEPTION_UDP_AVG_PKTLEN with avg_pktlen 86\nSEC-367 Exclude traffic GENOME_SRC_EXCEPTION_UDP_AVG_PKTLEN with avg pktlen 1364\nSEC-391 add exception for anyconnect through GENOME_PROXY_UNVERIFIED\nSEC-441 add exception for solana.com on sizes 1077 or 1087",
  "order": "4300",
  "tag": "",
  "ddos_type": "udpflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['ip_version'] == 4) & (df['protocol'] == 17) & (df['addr.dst:num_udp_addr_src_unique'] > 100) & (df['avg_pktlen'] == df['addr.dst:udp_pktlen_invariant']) & ((df['port.dst'] != 123) | (~df['avg_pktlen'].isin([76]))) & ((~df['port.dst'].isin([80,443])) | (~df['avg_pktlen'].isin([1260,1280]))) & (~(df['genome.src'].isin([ GENOME_EXCEPTION_VOIP ]) | df['genome.src'].isin([ GENOME_FANG ]) | df['genome.dst'].isin([ GENOME_EXCEPTION_VOIP ]) | df['genome.dst'].isin([ GENOME_FANG ]) | df['genome.dst'].isin([ GENOME_PROXY_UNVERIFIED ]))) & (~df['avg_pktlen'].isin([1420,1500,200])) & ((~df['genome.src'].isin([ GENOME_SRC_EXCEPTION_UDP_AVG_PKTLEN ])) | (~df['avg_pktlen'].isin([1364,1077,1087]))) & ((~df['genome.dst'].isin([ GENOME_DST_EXCEPTION_UDP_AVG_PKTLEN ])) | (~df['avg_pktlen'].isin([86])))",
  "position_id": 26,
  "display_name": "udp_avg_pktlen_invariant_v4"
}{
  "gid": "27",
  "name": "tcpflood_ack_pkt_len_v4",
  "dfmatch": "(df['ip_version'] == 4) &  (df['protocol'] == 6) & (df['tcpflags'] == TCP_A) & ((df['avg_pktlen'] < 40) )",
  "comment": "",
  "order": "4350",
  "tag": "",
  "ddos_type": "tcpackflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['ip_version'] == 4) &  (df['protocol'] == 6) & (df['tcpflags'] == TCP_A) & ((df['avg_pktlen'] < 40) )",
  "position_id": 27,
  "display_name": "tcpflood_ack_pkt_len_v4"
}{
  "gid": "28",
  "name": "bad_port_combo1",
  "dfmatch": "df['port.src'].isin([21,23,53,161,389,1900, 5060,5061,7547]) & df['port.dst'].isin([21,23,80,161,443,3074])",
  "comment": "",
  "order": "3500",
  "tag": "",
  "ddos_type": "spoofed",
  "threat_level": "20",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "df['port.src'].isin([21,23,53,161,389,1900, 5060,5061,7547]) & df['port.dst'].isin([21,23,80,161,443,3074])",
  "position_id": 28,
  "display_name": "bad_port_combo1"
}{
  "gid": "29",
  "name": "wsd_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([3702,0])) & (df['genome.src'].str.contains('wsd'))",
  "comment": "",
  "order": "1800",
  "tag": "",
  "ddos_type": "wsd",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([3702,0])) & (df['genome.src'].isin([GENOME_AMPLIFIER_WSD]))",
  "position_id": 29,
  "display_name": "wsd_amplifier"
}{
  "gid": "30",
  "name": "ard_amplifier",
  "dfmatch": "((df['protocol'] == 17) & (df['port.src'].isin([3283,0])) & ( (df['genome.src'].str.contains('open_apple_remote_desktop'))))",
  "comment": "",
  "order": "2100",
  "tag": "",
  "ddos_type": "arms",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "((df['protocol'] == 17) & (df['port.src'].isin([3283,0])) & ( (df['genome.src'].str.contains('open_apple_remote_desktop'))))",
  "position_id": 30,
  "display_name": "ard_amplifier"
}{
  "gid": "31",
  "name": "snmp_amplifier",
  "dfmatch": "((df['protocol'] == 17) & (df['port.src'].isin([161,0])) & (df['genome.src'].str.contains('opensnmp')))",
  "comment": "",
  "order": "2200",
  "tag": "",
  "ddos_type": "snmp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "((df['protocol'] == 17) & (df['port.src'].isin([161,0])) & (df['genome.src'].str.contains('opensnmp')))",
  "position_id": 31,
  "display_name": "snmp_amplifier"
}{
  "gid": "32",
  "name": "snmp_amplifier_past",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([161])) & (df['genome.src'].str.contains('ddosamp'))",
  "comment": "",
  "order": "2250",
  "tag": "",
  "ddos_type": "snmp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([161])) & (df['genome.src'].isin([GENOME_AMPLIFIER_DDOS]))",
  "position_id": 32,
  "display_name": "snmp_amplifier_past"
}{
  "gid": "33",
  "name": "wsd_amplifier_past",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([3702])) & (df['genome.src'].str.contains('ddosamp'))",
  "comment": "",
  "order": "1950",
  "tag": "",
  "ddos_type": "wsd",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([3702])) & (df['genome.src'].isin([GENOME_AMPLIFIER_DDOS]))",
  "position_id": 33,
  "display_name": "wsd_amplifier_past"
}{
  "gid": "34",
  "name": "msql_amplifier_past",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([1434])) & (df['genome.src'].str.contains('ddosamp'))",
  "comment": "",
  "order": "2350",
  "tag": "",
  "ddos_type": "sql",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([1434])) & (df['genome.src'].isin([GENOME_AMPLIFIER_DDOS]))",
  "position_id": 34,
  "display_name": "msql_amplifier_past"
}{
  "gid": "35",
  "name": "icmp",
  "dfmatch": "(df['protocol'].isin([1,58])) & (~df['genome.src'].str.contains('dns.cloudflare.com') & ~df['genome.src'].str.contains('dns.google.com') & ~df['genome.src'].str.contains('www.microsoft.com') & ~df['genome.src'].str.contains('www.google.com') & ~df['genome.src'].str.contains('dns.lumen.com') & ~df['genome.src'].str.contains('opendns.com') & ~df['genome.src'].str.contains('dns.comcast.com') & ~df['genome.src'].str.contains('dns.uplus.co.kr') & ~df['genome.src'].str.contains('cloudflare.com')) & (~df['genome.src'].str.contains('bogon') & ~df['genome.src'].str.contains('rfc1918_space') & ~df['genome.src'].str.contains('reserved') & ~df['genome.src'].str.contains('private_v6')) & (( ~df['genome.dst'].str.contains('dns.cloudflare.com')) & ( ~df['genome.dst'].str.contains('dns.google.com')) & ( ~df['genome.dst'].str.contains('www.microsoft.com')) & ( ~df['genome.dst'].str.contains('www.google.com')) & ( ~df['genome.dst'].str.contains('dns.lumen.com')) & ( ~df['genome.dst'].str.contains('opendns.com')) & ( ~df['genome.dst'].str.contains('dns.comcast.com')) & ( ~df['genome.dst'].str.contains('dns.uplus.co.kr')) & ( ~df['genome.dst'].str.contains('cloudflare.com')))",
  "comment": "SEC-431 exclude flows from bogon sources (proxy for rfc1918 exclusion)",
  "order": "3600",
  "tag": "",
  "ddos_type": "icmp",
  "threat_level": "1",
  "num_unique_src_per_dst_24": "75",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "2",
  "dfmatch_orig": "(df['protocol'].isin([1,58])) & (~df['genome.src'].isin([ GENOME_EXCEPTION_ICMP ])) & (~df['genome.src'].isin([ GENOME_BOGONS ])) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_ICMP ]))",
  "position_id": 35,
  "display_name": "icmp"
}{
  "gid": "36",
  "name": "ard_amplifier_past",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([3283])) & (df['genome.src'].str.contains('ddosamp'))",
  "comment": "",
  "order": "2150",
  "tag": "",
  "ddos_type": "arms",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([3283])) & (df['genome.src'].isin([GENOME_AMPLIFIER_DDOS]))",
  "position_id": 36,
  "display_name": "ard_amplifier_past"
}{
  "gid": "37",
  "name": "bogon",
  "dfmatch": "(df['genome.src'].str.contains('bogon') | df['genome.src'].str.contains('rfc1918_space') | df['genome.src'].str.contains('reserved') | df['genome.src'].str.contains('private_v6')) & (( ~df['genome.dst'].str.contains('bogon')) & ( ~df['genome.dst'].str.contains('rfc1918_space')) & ( ~df['genome.dst'].str.contains('reserved')) & ( ~df['genome.dst'].str.contains('private_v6'))) & (( ~df['genome.dst'].str.contains('multicast')))",
  "comment": "SEC-431 exclude flows from bogon sources (proxy for rfc1918 exclusion)",
  "order": "3950",
  "tag": "",
  "ddos_type": "spoofed",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['genome.src'].isin([ GENOME_BOGONS ])) & (~df['genome.dst'].isin([ GENOME_BOGONS ])) & (~df['genome.dst'].isin([ GENOME_MULTICAST ]))",
  "position_id": 37,
  "display_name": "bogon"
}{
  "gid": "38",
  "name": "bad_port_combo2",
  "dfmatch": "((df['port.src'].isin([22,80,443,8080,27015])) & (df['port.dst'].isin([53,1900,5000,5060,5061,7547])))",
  "comment": "SEC-492: Added src 22, dst 5000 (22,80,443 to 5000)",
  "order": "3550",
  "tag": "",
  "ddos_type": "spoofed",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "((df['port.src'].isin([22,80,443,8080,27015])) & (df['port.dst'].isin([53,1900,5000,5060,5061,7547])))",
  "position_id": 38,
  "display_name": "bad_port_combo2"
}{
  "gid": "39",
  "name": "dhcpd_amplifier",
  "dfmatch": "((df['protocol'] == 17) & (df['port.src'] == 37810))",
  "comment": "",
  "order": "2400",
  "tag": "",
  "ddos_type": "dhd",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "((df['protocol'] == 17) & (df['port.src'] == 37810))",
  "position_id": 39,
  "display_name": "dhcpd_amplifier"
}{
  "gid": "40",
  "name": "chargen_amplifier",
  "dfmatch": "(df['protocol'] == 17) & ((df['port.src'] == 19) | ((df['port.src'] == 0) & (df['genome.src'].str.contains('chargen'))))",
  "comment": "",
  "order": "2550",
  "tag": "",
  "ddos_type": "chargen",
  "threat_level": "50",
  "num_unique_src_per_dst_24": "2",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & ((df['port.src'] == 19) | ((df['port.src'] == 0) & (df['genome.src'].isin([ GENOME_AMPLIFIER_CHARGEN ]))))",
  "position_id": 40,
  "display_name": "chargen_amplifier"
}{
  "gid": "41",
  "name": "tcp_syn_ack",
  "dfmatch": "(df['tcpflags'] == TCP_SA)  & (df['addr.dst:num_tcp_syn_ack_addr_src_unique'] > 100)",
  "comment": "Syn-Ack example 912",
  "order": "3200",
  "tag": "",
  "ddos_type": "tcpreflection",
  "threat_level": "1",
  "num_unique_src_per_dst_24": "500",
  "pps_per_dst_24": "20000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['tcpflags'] == TCP_SA)  & (df['addr.dst:num_tcp_syn_ack_addr_src_unique'] > 100)",
  "position_id": 41,
  "display_name": "tcp_syn_ack"
}{
  "gid": "42",
  "name": "memcache",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 11211)",
  "comment": "Changed 8/20/22 looking at https://library.deepfield.net/attack/3319 -- the discriminator should be number of memcache not packet size",
  "order": "1600",
  "tag": "",
  "ddos_type": "memcache",
  "threat_level": "50",
  "num_unique_src_per_dst_24": "2",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 11211)",
  "position_id": 42,
  "display_name": "memcache"
}{
  "gid": "44",
  "name": "quic_flood",
  "dfmatch": "(df['port.dst'].isin([80,443])) & (df['protocol'] == 17) & (( ~df['genome.dst'].str.contains('quic')) & ( ~df['genome.dst'].str.contains('google.com')) & ( ~df['genome.dst'].str.contains('facebook.com')) & ( ~df['genome.dst'].str.contains('apple.com')) & ( ~df['genome.dst'].str.contains('instagram.com')) & ( ~df['genome.dst'].str.contains('cdn.bytedance.com')) & ( ~df['genome.dst'].str.contains('cdn.tencent.com')) & ( ~df['genome.dst'].str.contains('continent8.com')) & ( ~df['genome.dst'].str.contains('zscaler.com')) & ( ~df['genome.dst'].str.contains('cloudflare.com')) & ( ~df['genome.dst'].str.contains('fastly.com')) & ( ~df['genome.dst'].str.contains('akamai.net')) & ( ~df['genome.dst'].str.contains('likely_vpn')) & ( ~df['genome.dst'].str.contains('cdn77.com')) & ( ~df['genome.dst'].str.contains('tiktok.com')) & ( ~df['genome.dst'].str.contains('cloudfront.com')) & ( ~df['genome.dst'].str.contains('netskope.com')) & ( ~df['genome.dst'].str.contains('vpn.amazonaws.com')) & ( ~df['genome.dst'].str.contains('wechat.qq.tencent.com')) & ( ~df['genome.dst'].str.contains('169.chinaunicom.com')) & ( ~df['genome.dst'].str.contains('anyconnect')) & ( ~df['genome.dst'].str.contains('fortinet')) & ( ~df['genome.dst'].str.contains('f5_bigip')) & ( ~df['genome.dst'].str.contains('box.com')) & ( ~df['genome.dst'].str.contains('bluecoat.com')) & ( ~df['genome.dst'].str.contains('catonetworks.com')) & ( ~df['genome.dst'].str.contains('opendns.com')) & ( ~df['genome.dst'].str.contains('protonvpn.com')) & ( ~df['genome.dst'].str.contains('uber.com')) & ( ~df['genome.dst'].str.contains('snapchat.com')) & ( ~df['genome.dst'].str.contains('checkip.synology.com')) & ( ~df['genome.dst'].str.contains('vpn.samsung.com')) & ( ~df['genome.dst'].str.contains('viber.com')) & ( ~df['genome.dst'].str.contains('cache.google.com')) & ( ~df['genome.dst'].str.contains('connect_secure')) & ( ~df['genome.dst'].str.contains('cisco')))",
  "comment": "",
  "order": "3300",
  "tag": "",
  "ddos_type": "quic",
  "threat_level": "4",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "30000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['port.dst'].isin([80,443])) & (df['protocol'] == 17) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_QUIC ]))",
  "position_id": 44,
  "display_name": "quic_flood"
}{
  "gid": "45",
  "name": "dns_amplifier_outbound",
  "dfmatch": "(df['protocol'] == 17) & (df['port.dst'].isin([53])) & (df['genome.dst'].str.contains('dns_all')) & (( ~df['genome.src'].str.contains('dns.charter.com')) & ( ~df['genome.src'].str.contains('doh.charter.com')) & ( ~df['genome.src'].str.contains('dns.google.com')) & ( ~df['genome.src'].str.contains('dns.cloudflare.com')) & ( ~df['genome.src'].str.contains('dns.cloudflare.com')) & ( ~df['genome.src'].str.contains('dns.apple.com')) & ( ~df['genome.src'].str.contains('route53.amazonaws.com')) & ( ~df['genome.src'].str.contains('root-servers.org')) & ( ~df['genome.src'].str.contains('gtld-servers.net')) & ( ~df['genome.src'].str.contains('dns.fortinet.com')) & ( ~df['genome.src'].str.contains('quad9.net')) & ( ~df['genome.src'].str.contains('dns.akamai.net')) & ( ~df['genome.src'].str.contains('dns.azure.com')) & ( ~df['genome.src'].str.contains('ultradns.com')) & ( ~df['genome.src'].str.contains('dns.fastly.com')) & ( ~df['genome.src'].str.contains('dns.amazonaws.com')) & ( ~df['genome.src'].str.contains('dns.comcast.com')) & ( ~df['genome.src'].str.contains('dns.microsoft.com')) & ( ~df['genome.src'].str.contains('dns.alibaba.com')) & ( ~df['genome.src'].str.contains('dns.baidu.com')) & ( ~df['genome.src'].str.contains('dns.windstream.com')) & ( ~df['genome.src'].str.contains('dns.verizon.com')) & ( ~df['genome.src'].str.contains('dns.totalplay.com')) & ( ~df['genome.src'].str.contains('dns.linode.com')) & ( ~df['genome.src'].str.contains('dns.mediacomcable.com')) & ( ~df['genome.src'].str.contains('dns.bouyguestelecom.fr')) & ( ~df['genome.src'].str.contains('dns.continent8.com')) & ( ~df['genome.src'].str.contains('dns.lumen.com')) & ( ~df['genome.src'].str.contains('dns.ntt.com')) & ( ~df['genome.src'].str.contains('dns.vodafone.com')) & ( ~df['genome.src'].str.contains('dns.yandex.ru')) & ( ~df['genome.src'].str.contains('opendns.com')) & ( ~df['genome.src'].str.contains('dns.fdn.fr')) & ( ~df['genome.src'].str.contains('dns.dnshome.de')) & ( ~df['genome.src'].str.contains('dns.skbroadband.com')) & ( ~df['genome.src'].str.contains('dns.lgcns.com')) & ( ~df['genome.src'].str.contains('dns0.eu')) & ( ~df['genome.src'].str.contains('dns.uplus.co.kr')) & ( ~df['genome.src'].str.contains('dns.elisa.com'))) & (( ~df['genome.dst'].str.contains('dns.charter.com')) & ( ~df['genome.dst'].str.contains('doh.charter.com')) & ( ~df['genome.dst'].str.contains('dns.google.com')) & ( ~df['genome.dst'].str.contains('dns.cloudflare.com')) & ( ~df['genome.dst'].str.contains('dns.cloudflare.com')) & ( ~df['genome.dst'].str.contains('dns.apple.com')) & ( ~df['genome.dst'].str.contains('route53.amazonaws.com')) & ( ~df['genome.dst'].str.contains('root-servers.org')) & ( ~df['genome.dst'].str.contains('gtld-servers.net')) & ( ~df['genome.dst'].str.contains('dns.fortinet.com')) & ( ~df['genome.dst'].str.contains('quad9.net')) & ( ~df['genome.dst'].str.contains('dns.akamai.net')) & ( ~df['genome.dst'].str.contains('dns.azure.com')) & ( ~df['genome.dst'].str.contains('ultradns.com')) & ( ~df['genome.dst'].str.contains('dns.fastly.com')) & ( ~df['genome.dst'].str.contains('dns.amazonaws.com')) & ( ~df['genome.dst'].str.contains('dns.comcast.com')) & ( ~df['genome.dst'].str.contains('dns.microsoft.com')) & ( ~df['genome.dst'].str.contains('dns.alibaba.com')) & ( ~df['genome.dst'].str.contains('dns.baidu.com')) & ( ~df['genome.dst'].str.contains('dns.windstream.com')) & ( ~df['genome.dst'].str.contains('dns.verizon.com')) & ( ~df['genome.dst'].str.contains('dns.totalplay.com')) & ( ~df['genome.dst'].str.contains('dns.linode.com')) & ( ~df['genome.dst'].str.contains('dns.mediacomcable.com')) & ( ~df['genome.dst'].str.contains('dns.bouyguestelecom.fr')) & ( ~df['genome.dst'].str.contains('dns.continent8.com')) & ( ~df['genome.dst'].str.contains('dns.lumen.com')) & ( ~df['genome.dst'].str.contains('dns.ntt.com')) & ( ~df['genome.dst'].str.contains('dns.vodafone.com')) & ( ~df['genome.dst'].str.contains('dns.yandex.ru')) & ( ~df['genome.dst'].str.contains('opendns.com')) & ( ~df['genome.dst'].str.contains('dns.fdn.fr')) & ( ~df['genome.dst'].str.contains('dns.dnshome.de')) & ( ~df['genome.dst'].str.contains('dns.skbroadband.com')) & ( ~df['genome.dst'].str.contains('dns.lgcns.com')) & ( ~df['genome.dst'].str.contains('dns0.eu')) & ( ~df['genome.dst'].str.contains('dns.uplus.co.kr')) & ( ~df['genome.dst'].str.contains('dns.elisa.com')))",
  "comment": "",
  "order": "2910",
  "tag": "",
  "ddos_type": "dns",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.dst'].isin([53])) & (df['genome.dst'].isin([GENOME_AMPLIFIER_DNS])) & (~df['genome.src'].isin([ GENOME_PUBLIC_DNS ])) & (~df['genome.dst'].isin([ GENOME_PUBLIC_DNS ]))",
  "position_id": 45,
  "display_name": "dns_amplifier_outbound"
}{
  "gid": "46",
  "name": "spamhaus",
  "dfmatch": "(df['protocol'].isin([1,6,17])) & ((df['genome.src'].str.contains('spamhaus'))) & (( ~df['genome.dst'].str.contains('ookla.com')) & ( ~df['genome.dst'].str.contains('fastly.com')) & ( ~df['genome.dst'].str.contains('akamai.net')) & ( ~df['genome.dst'].str.contains('stackpath.com')) & ( ~df['genome.dst'].str.contains('edg.io')) & ( ~df['genome.dst'].str.contains('facebook.com')) & ( ~df['genome.dst'].str.contains('tiktok.com')) & ( ~df['genome.dst'].str.contains('openconnect.netflix.com')) & ( ~df['genome.dst'].str.contains('instagram.com')) & ( ~df['genome.dst'].str.contains('google.com')) & ( ~df['genome.dst'].str.contains('apple.com')) & ( ~df['genome.dst'].str.contains('icloud.apple.com')) & ( ~df['genome.dst'].str.contains('cloudcctv.uplus.co.kr')) & ( ~df['genome.dst'].str.contains('discord.com')) & ( ~df['genome.dst'].str.contains('roblox.com')) & ( ~df['genome.dst'].str.contains('alphonso.tv')) & ( ~df['genome.dst'].str.contains('cdn.flow.com.ar')) & ( ~df['genome.dst'].str.contains('telegram.org')))",
  "comment": "",
  "order": "3250",
  "tag": "",
  "ddos_type": "botnet",
  "threat_level": "2",
  "num_unique_src_per_dst_24": "50",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'].isin([1,6,17])) & ((df['genome.src'].str.contains('spamhaus'))) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_BOTNET ]))",
  "position_id": 46,
  "display_name": "spamhaus"
}{
  "gid": "47",
  "name": "tcp_scanning",
  "dfmatch": "(df['protocol'] == 6) & (df['tcpflags'].isin([TCP_S, TCP_SEC])) & (df['addr.src:num_tcp_syn_addr_dst_unique'] > 500)",
  "comment": "",
  "order": "4950",
  "tag": "",
  "ddos_type": "scanning",
  "threat_level": "100",
  "num_unique_src_per_dst_24": "1",
  "pps_per_dst_24": "20",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['protocol'] == 6) & (df['tcpflags'].isin([TCP_S, TCP_SEC])) & (df['addr.src:num_tcp_syn_addr_dst_unique'] > 500)",
  "position_id": 47,
  "display_name": "tcp_scanning"
}{
  "gid": "48",
  "name": "tcp_syn_flood_invalid_path",
  "dfmatch": "(df['tcpflags'] == TCP_S) & (df['addr.dst:num_tcp_syn_addr_src_unique'] > 500) & (df['invalid_path'])",
  "comment": "",
  "order": "5000",
  "tag": "require_999.0",
  "ddos_type": "synflood",
  "threat_level": "",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['tcpflags'] == TCP_S) & (df['addr.dst:num_tcp_syn_addr_src_unique'] > 500) & (df['invalid_path'])",
  "position_id": 48,
  "display_name": "tcp_syn_flood_invalid_path"
}{
  "gid": "49",
  "name": "tcpflood_port_ranges",
  "dfmatch": "(df['protocol'] == 6) & (df['port.src']  > 0) &  (df['port.src'] < 1024) &  (df['port.dst'] < 1024) & (~df['genome.src'].str.contains('opendns.com') & ~df['genome.src'].str.contains('cdn.microsoft.com') & ~df['genome.src'].str.contains('akamai.net') & ~df['genome.src'].str.contains('fastly.com') & ~df['genome.src'].str.contains('edg.io') & ~df['genome.src'].str.contains('s3.amazonaws.com') & ~df['genome.src'].str.contains('office.microsoft.com') & ~df['genome.src'].str.contains('teams.microsoft.com'))",
  "comment": "",
  "order": "3400",
  "tag": "",
  "ddos_type": "tcpflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['protocol'] == 6) & (df['port.src']  > 0) &  (df['port.src'] < 1024) &  (df['port.dst'] < 1024) & (~df['genome.src'].isin([ GENOME_EXCEPTION_TCP_FLOOD_PORT_RANGE ]))",
  "position_id": 49,
  "display_name": "tcpflood_port_ranges"
}{
  "gid": "50",
  "name": "botnet_tcp_syn",
  "dfmatch": "(df['protocol'].isin([6])) & (df['tcpflags'] .isin([TCP_S,  TCP_SEC, TCP_SC, TCP_SE])) &  (df['genome.src'].str.contains('ddosbot'))",
  "comment": "",
  "order": "3100",
  "tag": "",
  "ddos_type": "botnet",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['protocol'].isin([6])) & (df['tcpflags'] .isin([TCP_S,  TCP_SEC, TCP_SC, TCP_SE])) &  (df['genome.src'].isin([GENOME_BOTNET]))",
  "position_id": 50,
  "display_name": "botnet_tcp_syn"
}{
  "gid": "51",
  "name": "botnet_udp",
  "dfmatch": "(df['protocol'].isin([17])) &  (df['genome.src'].str.contains('ddosbot')) & (( ~df['genome.dst'].str.contains('ookla.com')) & ( ~df['genome.dst'].str.contains('fastly.com')) & ( ~df['genome.dst'].str.contains('akamai.net')) & ( ~df['genome.dst'].str.contains('stackpath.com')) & ( ~df['genome.dst'].str.contains('edg.io')) & ( ~df['genome.dst'].str.contains('facebook.com')) & ( ~df['genome.dst'].str.contains('tiktok.com')) & ( ~df['genome.dst'].str.contains('openconnect.netflix.com')) & ( ~df['genome.dst'].str.contains('instagram.com')) & ( ~df['genome.dst'].str.contains('google.com')) & ( ~df['genome.dst'].str.contains('apple.com')) & ( ~df['genome.dst'].str.contains('icloud.apple.com')) & ( ~df['genome.dst'].str.contains('cloudcctv.uplus.co.kr')) & ( ~df['genome.dst'].str.contains('discord.com')) & ( ~df['genome.dst'].str.contains('roblox.com')) & ( ~df['genome.dst'].str.contains('alphonso.tv')) & ( ~df['genome.dst'].str.contains('cdn.flow.com.ar')) & ( ~df['genome.dst'].str.contains('telegram.org')))",
  "comment": "https://deepfield.atlassian.net/browse/CPL-12501 -- moved priority order up ",
  "order": "2908",
  "tag": "",
  "ddos_type": "botnet",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'].isin([17])) &  (df['genome.src'].isin([ GENOME_BOTNET ])) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_BOTNET ]))",
  "position_id": 51,
  "display_name": "botnet_udp"
}{
  "gid": "52",
  "name": "tcpflood_port_65535",
  "dfmatch": "(df['protocol'] == 6) & (df['port.src']  == 65535)",
  "comment": "",
  "order": "4000",
  "tag": "",
  "ddos_type": "tcpflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "1000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['protocol'] == 6) & (df['port.src']  == 65535)",
  "position_id": 52,
  "display_name": "tcpflood_port_65535"
}{
  "gid": "53",
  "name": "ssdp_amplifier_port",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([1900]))",
  "comment": "Odd that we have seen SSDP traffic from IPs that neither we not shodan see with open SSDP ports",
  "order": "1700",
  "tag": "",
  "ddos_type": "ssdp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([1900]))",
  "position_id": 53,
  "display_name": "ssdp_amplifier_port"
}{
  "gid": "54",
  "name": "udpflood_bogon",
  "dfmatch": "(df['protocol'] == 17) & (df['genome.src'].str.contains('bogon') | df['genome.src'].str.contains('rfc1918_space') | df['genome.src'].str.contains('reserved') | df['genome.src'].str.contains('private_v6')) &  (( ~df['genome.dst'].str.contains('bogon')) & ( ~df['genome.dst'].str.contains('rfc1918_space')) & ( ~df['genome.dst'].str.contains('reserved')) & ( ~df['genome.dst'].str.contains('private_v6')))",
  "comment": "See 1126 Cloudflare flood",
  "order": "3850",
  "tag": "",
  "ddos_type": "spoofed",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "50",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['genome.src'].isin([GENOME_BOGONS])) &  (~df['genome.dst'].isin([GENOME_BOGONS]))",
  "position_id": 54,
  "display_name": "udpflood_bogon"
}{
  "gid": "55",
  "name": "udpflood_port",
  "dfmatch": " (df['protocol'] == 17) & (df['port.src'] > 0) & (df['port.src'] < 1024) & (df['port.dst'] < 1024) & (~df['port.src'].isin([500,514])) & (df['port.dst'].isin([500,514]))",
  "comment": "Example Cloudflare flood 1126\nWe need to exclude IPSEC (e.g. sample 3481) because this can have large DC -> enterprise tunnel traffic during backups, etc",
  "order": "3450",
  "tag": "",
  "ddos_type": "udpflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "dfmatch_orig": " (df['protocol'] == 17) & (df['port.src'] > 0) & (df['port.src'] < 1024) & (df['port.dst'] < 1024) & (~df['port.src'].isin([500,514])) & (df['port.dst'].isin([500,514]))",
  "position_id": 55,
  "display_name": "udpflood_port"
}{
  "gid": "56",
  "name": "botnet_gre",
  "dfmatch": "(df['protocol'].isin([47])) & ((df['genome.src'].str.contains('ddosbot') | df['genome.src'].str.contains('c2s')) | (df['genome.src'].str.contains('embedthis') | df['genome.src'].str.contains('webcam') | df['genome.src'].str.contains('hikvision') | df['genome.src'].str.contains('cisco') | df['genome.src'].str.contains('rfjs') | df['genome.src'].str.contains('huawei_router') | df['genome.src'].str.contains('netentsec') | df['genome.src'].str.contains('gitlab') | df['genome.src'].str.contains('app-webs') | df['genome.src'].str.contains('mini_web_server') | df['genome.src'].str.contains('asus_device') | df['genome.src'].str.contains('prtg') | df['genome.src'].str.contains('systemerror') | df['genome.src'].str.contains('boa') | df['genome.src'].str.contains('dahuatech') | df['genome.src'].str.contains('dnvrs-webs') | df['genome.src'].str.contains('telnet') | df['genome.src'].str.contains('micro_httpd') | df['genome.src'].str.contains('lighttpd') | df['genome.src'].str.contains('draytekvigor') | df['genome.src'].str.contains('sip_device') | df['genome.src'].str.contains('mini_httpd') | df['genome.src'].str.contains('mvpower') | df['genome.src'].str.contains('telebreeze') | df['genome.src'].str.contains('rdp_server') | df['genome.src'].str.contains('smb') | df['genome.src'].str.contains('telebreeze') | df['genome.src'].str.contains('upnp') | df['genome.src'].str.contains('thttpd') | df['genome.src'].str.contains('kubernetes') | df['genome.src'].str.contains('vnc_server') | df['genome.src'].str.contains('avtech') | df['genome.src'].str.contains('uc-httpd') | df['genome.src'].str.contains('zyxel') | df['genome.src'].str.contains('wintendo') | df['genome.src'].str.contains('httpd') | df['genome.src'].str.contains('portmap') | df['genome.src'].str.contains('uhttpd') | df['genome.src'].str.contains('sdmctv') | df['genome.src'].str.contains('ericom') | df['genome.src'].str.contains('gsoap') | df['genome.src'].str.contains('camera_dlink') | df['genome.src'].str.contains('vsolcn') | df['genome.src'].str.contains('carrier') | df['genome.src'].str.contains('zkteco') | df['genome.src'].str.contains('speco') | df['genome.src'].str.contains('ruckuswireless') | df['genome.src'].str.contains('commax') | df['genome.src'].str.contains('gargoyle') | df['genome.src'].str.contains('rifatron') | df['genome.src'].str.contains('comelit') | df['genome.src'].str.contains('egauge') | df['genome.src'].str.contains('nucom') | df['genome.src'].str.contains('telesquare') | df['genome.src'].str.contains('vacron') | df['genome.src'].str.contains('tenda') | df['genome.src'].str.contains('nuuo') | df['genome.src'].str.contains('httpd_eol') | df['genome.src'].str.contains('tplink') | df['genome.src'].str.contains('selenium') | df['genome.src'].str.contains('chatwoot') | df['genome.src'].str.contains('irz') | df['genome.src'].str.contains('proftpd_cve') | df['genome.src'].str.contains('wsftp_cve') | df['genome.src'].str.contains('yifan_325') | df['genome.src'].str.contains('qbittorrent') | df['genome.src'].str.contains('squid_cve') | df['genome.src'].str.contains('cambiumnetworks') | df['genome.src'].str.contains('homeassistant') | df['genome.src'].str.contains('centaur3') | df['genome.src'].str.contains('h3crouter') | df['genome.src'].str.contains('nodered') | df['genome.src'].str.contains('activemq_cve') | df['genome.src'].str.contains('max-tech') | df['genome.src'].str.contains('dropbear_cve') | df['genome.src'].str.contains('metabase') | df['genome.src'].str.contains('datacom_cve') | df['genome.src'].str.contains('openfire')))",
  "comment": "",
  "order": "3050",
  "tag": "",
  "ddos_type": "botnet",
  "threat_level": "25",
  "num_unique_src_per_dst_24": "4",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "16,69",
  "dfmatch_orig": "(df['protocol'].isin([47])) & ((df['genome.src'].isin([GENOME_BOTNET])) | (df['genome.src'].isin([ GENOME_IOT ])))",
  "position_id": 56,
  "display_name": "botnet_gre"
}{
  "gid": "57",
  "name": "botnet_quic",
  "dfmatch": "(df['protocol'] == 17) & (df['port.dst'].isin([80,443])) &  (df['genome.src'].str.contains('ddosbot') | df['genome.src'].str.contains('c2s')) & (( ~df['genome.dst'].str.contains('ookla.com')) & ( ~df['genome.dst'].str.contains('fastly.com')) & ( ~df['genome.dst'].str.contains('akamai.net')) & ( ~df['genome.dst'].str.contains('stackpath.com')) & ( ~df['genome.dst'].str.contains('edg.io')) & ( ~df['genome.dst'].str.contains('facebook.com')) & ( ~df['genome.dst'].str.contains('tiktok.com')) & ( ~df['genome.dst'].str.contains('openconnect.netflix.com')) & ( ~df['genome.dst'].str.contains('instagram.com')) & ( ~df['genome.dst'].str.contains('google.com')) & ( ~df['genome.dst'].str.contains('anyconnect')) & ( ~df['genome.dst'].str.contains('likely_vpn')) & ( ~df['genome.dst'].str.contains('fortinet')) & ( ~df['genome.dst'].str.contains('f5_bigip')) & ( ~df['genome.dst'].str.contains('catonetworks.com')) & ( ~df['genome.dst'].str.contains('opendns.com')) & ( ~df['genome.dst'].str.contains('protonvpn.com')) & ( ~df['genome.dst'].str.contains('uber.com')) & ( ~df['genome.dst'].str.contains('snapchat.com')) & ( ~df['genome.dst'].str.contains('box.com')) & ( ~df['genome.dst'].str.contains('bluecoat.com')) & ( ~df['genome.dst'].str.contains('wechat.qq.tencent.com')) & ( ~df['genome.dst'].str.contains('vpn.samsung.com')) & ( ~df['genome.dst'].str.contains('cache.google.com')) & ( ~df['genome.dst'].str.contains('connect_secure')) & ( ~df['genome.dst'].str.contains('cisco')))",
  "comment": "",
  "order": "2907",
  "tag": "",
  "ddos_type": "botnet",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "16,69",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.dst'].isin([80,443])) &  (df['genome.src'].isin([GENOME_BOTNET])) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_VPN_BOTNET_QUIC ]))",
  "position_id": 57,
  "display_name": "botnet_quic"
}{
  "gid": "58",
  "name": "tcp_bgp",
  "dfmatch": "(df['protocol'] == 6) & (df['port.src'] == 179)",
  "comment": "",
  "order": "4450",
  "tag": "",
  "ddos_type": "tcpflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "(df['protocol'] == 6) & (df['port.src'] == 179)",
  "position_id": 58,
  "display_name": "tcp_bgp"
}{
  "gid": "59",
  "name": "udpflood_spoofed_path",
  "dfmatch": "(df['protocol'] == 17) & (df['addr.dst:num_udp_addr_src_unique'] > 1000) & (df['invalid_path'] == 1)",
  "comment": "",
  "order": "4420",
  "tag": "require_999.0",
  "ddos_type": "spoofed",
  "threat_level": "",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['addr.dst:num_udp_addr_src_unique'] > 1000) & (df['invalid_path'] == 1)",
  "position_id": 59,
  "display_name": "udpflood_spoofed_path"
}{
  "gid": "60",
  "name": "tcpflood_syn_count_by_dst_v1",
  "dfmatch": "(df['addr.dst:num_tcp_syn'] > 1000) & (df['tcpflags'].isin([TCP_S, TCP_SEC]))",
  "comment": "",
  "order": "3700",
  "tag": "",
  "ddos_type": "synflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "1000",
  "pps_per_dst_24": "",
  "dfmatch_orig": "(df['addr.dst:num_tcp_syn'] > 1000) & (df['tcpflags'].isin([TCP_S, TCP_SEC]))",
  "position_id": 60,
  "display_name": "tcpflood_syn_count_by_dst_v1"
}{
  "gid": "62",
  "name": "tcpflood_syn_65535",
  "dfmatch": "(df['tcpflags'] == TCP_S) & (df['port.dst'] == 65535)",
  "comment": "example in expo-attack 1201",
  "order": "4650",
  "tag": "",
  "ddos_type": "synflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "1000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['tcpflags'] == TCP_S) & (df['port.dst'] == 65535)",
  "position_id": 62,
  "display_name": "tcpflood_syn_65535"
}{
  "gid": "63",
  "name": "tcp_ack_avg_pktlen_invariant_v1",
  "dfmatch": "(df['ip_version'] == 4) &  (df['tcpflags'].isin([TCP_A, TCP_PA])) & (df['avg_pktlen'] == df['addr.dst:tcp_ack_pktlen_invariant']) & (~df['avg_pktlen'] .isin([0,40,52,72,1420,1452,1480,1500])) & (df['port.dst'] < 1024) & ((( ~df['genome.dst'].str.contains('redge.com')) & ( ~df['genome.dst'].str.contains('cloudcctv.uplus.co.kr')) & ( ~df['genome.dst'].str.contains('stream.nos.pt')) & ( ~df['genome.dst'].str.contains('osiristrading.com')) & ( ~df['genome.dst'].str.contains('fbcdn.net')) & ( ~df['genome.dst'].str.contains('facebook.com')) & ( ~df['genome.dst'].str.contains('akamai.net')) & ( ~df['genome.dst'].str.contains('roblox.com')) & ( ~df['genome.dst'].str.contains('terabox.com')) & ( ~df['genome.dst'].str.contains('citrix')) & ( ~df['genome.dst'].str.contains('cloudflare.com')) & ( ~df['genome.dst'].str.contains('bytedance.com')) & ( ~df['genome.dst'].str.contains('cdn.bytedance.com')) & ( ~df['genome.dst'].str.contains('tiktok.com')) & ( ~df['genome.dst'].str.contains('cdn.tiktok.com')) & ( ~df['genome.dst'].str.contains('zenlayer.com'))) | (~df['avg_pktlen'].isin([46,80,109,1380,1432,1440,1492,1495])))",
  "comment": "We need to filter out subscriber -> cloud using port.dst (e.g. 2920).\nGEN-527/DS-17716 - Exclude avg_pktlen 1452.\nSEC-112 - Exclude roblox.com and avg_pktlen 1440\nSEC-114 - Exclude terabox.com and avg_pktlen 1492",
  "order": "4500",
  "tag": "deprecate_6.0",
  "ddos_type": "tcpackflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "300",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['ip_version'] == 4) &  (df['tcpflags'].isin([TCP_A, TCP_PA])) & (df['avg_pktlen'] == df['addr.dst:tcp_ack_pktlen_invariant']) & (~df['avg_pktlen'] .isin([0,40,52,72,1420,1452,1480,1500])) & (df['port.dst'] < 1024) & ((~df['genome.dst'].isin([ GENOME_EXCEPTION_TCP_ACK_AVG_PKTLEN ])) | (~df['avg_pktlen'].isin([46,80,109,1380,1432,1440,1492,1495])))",
  "position_id": 63,
  "display_name": "tcp_ack_avg_pktlen_invariant_v1"
}{
  "gid": "64",
  "name": "udpflood_portsrc_65535",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 65535)",
  "comment": "",
  "order": "4700",
  "tag": "",
  "ddos_type": "spoofed",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "1000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 65535)",
  "position_id": 64,
  "display_name": "udpflood_portsrc_65535"
}{
  "gid": "65",
  "name": "udp_pktlen_v4",
  "dfmatch": "(df['ip_version'] == 4) & (df['protocol'] == 17) &  (df['avg_pktlen'] < 30) & (df['port.src']!=0)",
  "comment": "",
  "order": "4050",
  "tag": "",
  "ddos_type": "udpflood",
  "threat_level": "5",
  "num_unique_src_per_dst_24": "20",
  "pps_per_dst_24": "10000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['ip_version'] == 4) & (df['protocol'] == 17) &  (df['avg_pktlen'] < 30) & (df['port.src']!=0)",
  "position_id": 65,
  "display_name": "udp_pktlen_v4"
}{
  "gid": "66",
  "name": "qotd_amplifier",
  "dfmatch": " ((df['protocol'] == 17) & (df['port.src'] ==17))",
  "comment": "",
  "order": "2500",
  "tag": "",
  "ddos_type": "qotd",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "2",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": " ((df['protocol'] == 17) & (df['port.src'] ==17))",
  "position_id": 66,
  "display_name": "qotd_amplifier"
}{
  "gid": "67",
  "name": "mitel_amplifier",
  "dfmatch": "((df['protocol'] == 17) & (df['port.src'] == 10074))",
  "comment": "",
  "order": "2600",
  "tag": "",
  "ddos_type": "mitel",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "((df['protocol'] == 17) & (df['port.src'] == 10074))",
  "position_id": 67,
  "display_name": "mitel_amplifier"
}{
  "gid": "68",
  "name": "tcpflood_reset",
  "dfmatch": "(df['protocol'] == 6) & (df['tcpflags'].isin([TCP_R])) & (( ~df['genome.dst'].str.contains('alphonso.tv')) & ( ~df['genome.dst'].str.contains('akamai.net')) & ( ~df['genome.dst'].str.contains('telegram.org')) & ( ~df['genome.dst'].str.contains('osiristrading.com')))",
  "comment": "",
  "order": "4550",
  "tag": "",
  "ddos_type": "rstflood",
  "threat_level": "2",
  "num_unique_src_per_dst_24": "50",
  "pps_per_dst_24": "30000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 6) & (df['tcpflags'].isin([TCP_R])) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_TCP_FLOOD_RESET ]))",
  "position_id": 68,
  "display_name": "tcpflood_reset"
}{
  "gid": "69",
  "name": "portmap_amplifier",
  "dfmatch": "((df['protocol'] == 17) & (df['port.src'] == 111))",
  "comment": "",
  "order": "2650",
  "tag": "",
  "ddos_type": "portmap",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "((df['protocol'] == 17) & (df['port.src'] == 111))",
  "position_id": 69,
  "display_name": "portmap_amplifier"
}{
  "gid": "70",
  "name": "iot",
  "dfmatch": "(df['genome.src'].str.contains('embedthis') | df['genome.src'].str.contains('webcam') | df['genome.src'].str.contains('hikvision') | df['genome.src'].str.contains('cisco') | df['genome.src'].str.contains('rfjs') | df['genome.src'].str.contains('huawei_router') | df['genome.src'].str.contains('netentsec') | df['genome.src'].str.contains('gitlab') | df['genome.src'].str.contains('app-webs') | df['genome.src'].str.contains('mini_web_server') | df['genome.src'].str.contains('asus_device') | df['genome.src'].str.contains('prtg') | df['genome.src'].str.contains('systemerror') | df['genome.src'].str.contains('boa') | df['genome.src'].str.contains('dahuatech') | df['genome.src'].str.contains('dnvrs-webs') | df['genome.src'].str.contains('telnet') | df['genome.src'].str.contains('micro_httpd') | df['genome.src'].str.contains('lighttpd') | df['genome.src'].str.contains('draytekvigor') | df['genome.src'].str.contains('sip_device') | df['genome.src'].str.contains('mini_httpd') | df['genome.src'].str.contains('mvpower') | df['genome.src'].str.contains('telebreeze') | df['genome.src'].str.contains('rdp_server') | df['genome.src'].str.contains('smb') | df['genome.src'].str.contains('telebreeze') | df['genome.src'].str.contains('upnp') | df['genome.src'].str.contains('thttpd') | df['genome.src'].str.contains('kubernetes') | df['genome.src'].str.contains('vnc_server') | df['genome.src'].str.contains('avtech') | df['genome.src'].str.contains('uc-httpd') | df['genome.src'].str.contains('zyxel') | df['genome.src'].str.contains('wintendo') | df['genome.src'].str.contains('httpd') | df['genome.src'].str.contains('portmap') | df['genome.src'].str.contains('uhttpd') | df['genome.src'].str.contains('sdmctv') | df['genome.src'].str.contains('ericom') | df['genome.src'].str.contains('gsoap') | df['genome.src'].str.contains('camera_dlink') | df['genome.src'].str.contains('vsolcn') | df['genome.src'].str.contains('carrier') | df['genome.src'].str.contains('zkteco') | df['genome.src'].str.contains('speco') | df['genome.src'].str.contains('ruckuswireless') | df['genome.src'].str.contains('commax') | df['genome.src'].str.contains('gargoyle') | df['genome.src'].str.contains('rifatron') | df['genome.src'].str.contains('comelit') | df['genome.src'].str.contains('egauge') | df['genome.src'].str.contains('nucom') | df['genome.src'].str.contains('telesquare') | df['genome.src'].str.contains('vacron') | df['genome.src'].str.contains('tenda') | df['genome.src'].str.contains('nuuo') | df['genome.src'].str.contains('httpd_eol') | df['genome.src'].str.contains('tplink') | df['genome.src'].str.contains('selenium') | df['genome.src'].str.contains('chatwoot') | df['genome.src'].str.contains('irz') | df['genome.src'].str.contains('proftpd_cve') | df['genome.src'].str.contains('wsftp_cve') | df['genome.src'].str.contains('yifan_325') | df['genome.src'].str.contains('qbittorrent') | df['genome.src'].str.contains('squid_cve') | df['genome.src'].str.contains('cambiumnetworks') | df['genome.src'].str.contains('homeassistant') | df['genome.src'].str.contains('centaur3') | df['genome.src'].str.contains('h3crouter') | df['genome.src'].str.contains('nodered') | df['genome.src'].str.contains('activemq_cve') | df['genome.src'].str.contains('max-tech') | df['genome.src'].str.contains('dropbear_cve') | df['genome.src'].str.contains('metabase') | df['genome.src'].str.contains('datacom_cve') | df['genome.src'].str.contains('openfire')) & (( ~df['genome.dst'].str.contains('ookla.com')) & ( ~df['genome.dst'].str.contains('fastly.com')) & ( ~df['genome.dst'].str.contains('akamai.net')) & ( ~df['genome.dst'].str.contains('stackpath.com')) & ( ~df['genome.dst'].str.contains('edg.io')) & ( ~df['genome.dst'].str.contains('facebook.com')) & ( ~df['genome.dst'].str.contains('tiktok.com')) & ( ~df['genome.dst'].str.contains('openconnect.netflix.com')) & ( ~df['genome.dst'].str.contains('instagram.com')) & ( ~df['genome.dst'].str.contains('google.com')) & ( ~df['genome.dst'].str.contains('apple.com')) & ( ~df['genome.dst'].str.contains('icloud.apple.com')) & ( ~df['genome.dst'].str.contains('cloudcctv.uplus.co.kr')) & ( ~df['genome.dst'].str.contains('discord.com')) & ( ~df['genome.dst'].str.contains('roblox.com')) & ( ~df['genome.dst'].str.contains('alphonso.tv')) & ( ~df['genome.dst'].str.contains('cdn.flow.com.ar')) & ( ~df['genome.dst'].str.contains('telegram.org'))) & (~df['port.src'].isin([443])) & (( ~df['genome.src'].str.contains('astraweb.com')) & ( ~df['genome.src'].str.contains('telegram.org')))",
  "comment": "As part of https://deepfield.atlassian.net/browse/GEN-306, exclude google.  If we use Google or other FANG, we will need much larger unique_src_24\nCreate exception from port.src 443 as per SEC-261\nSEC-307: Create genome.src GENOME_EXCEPTION_IOT exceptions",
  "order": "4400",
  "tag": "",
  "ddos_type": "botnet",
  "threat_level": "4",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "50000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['genome.src'].isin([ GENOME_IOT ])) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_BOTNET ])) & (~df['port.src'].isin([443])) & (~df['genome.src'].isin([ GENOME_EXCEPTION_IOT]))",
  "position_id": 70,
  "display_name": "iot"
}{
  "gid": "71",
  "name": "p2p_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['genome.src'].str.contains('torrent') | df['genome.src'].str.contains('transmission')) & (( ~df['genome.dst'].str.contains('ookla.com')) & ( ~df['genome.dst'].str.contains('fastly.com')) & ( ~df['genome.dst'].str.contains('akamai.net')) & ( ~df['genome.dst'].str.contains('stackpath.com')) & ( ~df['genome.dst'].str.contains('edg.io')) & ( ~df['genome.dst'].str.contains('facebook.com')) & ( ~df['genome.dst'].str.contains('tiktok.com')) & ( ~df['genome.dst'].str.contains('openconnect.netflix.com')) & ( ~df['genome.dst'].str.contains('instagram.com')) & ( ~df['genome.dst'].str.contains('google.com')) & ( ~df['genome.dst'].str.contains('apple.com')) & ( ~df['genome.dst'].str.contains('icloud.apple.com')) & ( ~df['genome.dst'].str.contains('cloudcctv.uplus.co.kr')) & ( ~df['genome.dst'].str.contains('discord.com')) & ( ~df['genome.dst'].str.contains('roblox.com')) & ( ~df['genome.dst'].str.contains('alphonso.tv')) & ( ~df['genome.dst'].str.contains('cdn.flow.com.ar')) & ( ~df['genome.dst'].str.contains('telegram.org')))",
  "comment": "",
  "order": "2700",
  "tag": "",
  "ddos_type": "p2p",
  "threat_level": "100",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['genome.src'].isin([ GENOME_P2P ])) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_BOTNET ]))",
  "position_id": 71,
  "display_name": "p2p_amplifier"
}{
  "gid": "72",
  "name": "stun_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 3478) & (~df['origin_asn.src'].isin([714,8075,14618,15169,16509,9527,22697,32934,63293]))",
  "comment": "",
  "order": "2450",
  "tag": "",
  "ddos_type": "stun",
  "threat_level": "2",
  "num_unique_src_per_dst_24": "50",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 3478) & (~df['origin_asn.src'].isin([714,8075,14618,15169,16509,9527,22697,32934,63293]))",
  "position_id": 72,
  "display_name": "stun_amplifier"
}{
  "gid": "73",
  "name": "tftp_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 69)",
  "comment": "",
  "order": "1850",
  "tag": "",
  "ddos_type": "tftp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 69)",
  "position_id": 73,
  "display_name": "tftp_amplifier"
}{
  "gid": "74",
  "name": "netbios_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 137)",
  "comment": "",
  "order": "1900",
  "tag": "",
  "ddos_type": "netbios",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 137)",
  "position_id": 74,
  "display_name": "netbios_amplifier"
}{
  "gid": "75",
  "name": "coap_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 5683)",
  "comment": "",
  "order": "2750",
  "tag": "",
  "ddos_type": "coap",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 5683)",
  "position_id": 75,
  "display_name": "coap_amplifier"
}{
  "gid": "76",
  "name": "lantronix_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 30718)",
  "comment": "",
  "order": "2800",
  "tag": "",
  "ddos_type": "lantronix",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 30718)",
  "position_id": 76,
  "display_name": "lantronix_amplifier"
}{
  "gid": "77",
  "name": "snmp_amplifier_too_much_snmp",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 161)",
  "comment": "",
  "order": "2300",
  "tag": "",
  "ddos_type": "snmp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 161)",
  "position_id": 77,
  "display_name": "snmp_amplifier_too_much_snmp"
}{
  "gid": "78",
  "name": "valve_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([27015,27016,27017]))",
  "comment": "",
  "order": "2850",
  "tag": "",
  "ddos_type": "valve",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "50",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([27015,27016,27017]))",
  "position_id": 78,
  "display_name": "valve_amplifier"
}{
  "gid": "79",
  "name": "tcpflood_bogon",
  "dfmatch": "(df['protocol'] == 6) &  (df['genome.src'].str.contains('bogon') | df['genome.src'].str.contains('rfc1918_space') | df['genome.src'].str.contains('reserved') | df['genome.src'].str.contains('private_v6')) & (( ~df['genome.dst'].str.contains('bogon')) & ( ~df['genome.dst'].str.contains('rfc1918_space')) & ( ~df['genome.dst'].str.contains('reserved')) & ( ~df['genome.dst'].str.contains('private_v6')))",
  "comment": "",
  "order": "3900",
  "tag": "",
  "ddos_type": "tcpflood",
  "threat_level": "5",
  "num_unique_src_per_dst_24": "20",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 6) &  (df['genome.src'].isin([GENOME_BOGONS])) & (~df['genome.dst'].isin([GENOME_BOGONS]))",
  "position_id": 79,
  "display_name": "tcpflood_bogon"
}{
  "gid": "80",
  "name": "invalid_tls",
  "dfmatch": "(df['genome.src'].str.contains('invalid_tls')) & (df['site.src'] == 0)",
  "comment": "",
  "order": "4600",
  "tag": "",
  "ddos_type": "botnet",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "50",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "(df['genome.src'].str.contains('invalid_tls')) & (df['site.src'] == 0)",
  "position_id": 80,
  "display_name": "invalid_tls"
}{
  "gid": "81",
  "name": "tcp_rare_flags",
  "dfmatch": "(df['protocol'] == 6) & (df['tcpflags'].isin([TCP_SEC, TCP_SC, TCP_SE]))",
  "comment": "",
  "order": "4800",
  "tag": "",
  "ddos_type": "synflood",
  "threat_level": "50",
  "num_unique_src_per_dst_24": "50",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['protocol'] == 6) & (df['tcpflags'].isin([TCP_SEC, TCP_SC, TCP_SE]))",
  "position_id": 81,
  "display_name": "tcp_rare_flags"
}{
  "gid": "82",
  "name": "ssdp_amplifier_outbound",
  "dfmatch": " (df['protocol'] == 17) & (df['port.dst'].isin([1900]))",
  "comment": "",
  "order": "1750",
  "tag": "",
  "ddos_type": "ssdp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": " (df['protocol'] == 17) & (df['port.dst'].isin([1900]))",
  "position_id": 82,
  "display_name": "ssdp_amplifier_outbound"
}{
  "gid": "83",
  "name": "gre_flood",
  "dfmatch": "(df['protocol'] == 47) & (~df['genome.src'].str.contains('xfw.comcast.com')) & (( ~df['genome.dst'].str.contains('xfw.comcast.com')))",
  "comment": "",
  "order": "4850",
  "tag": "",
  "ddos_type": "greflood",
  "threat_level": "1",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['protocol'] == 47) & (~df['genome.src'].isin([GENOME_EXCEPTION_GRE])) & (~df['genome.dst'].isin([GENOME_EXCEPTION_GRE]))",
  "position_id": 83,
  "display_name": "gre_flood"
}{
  "gid": "84",
  "name": "wsd_amplifier_port",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([3702]))",
  "comment": "",
  "order": "2000",
  "tag": "",
  "ddos_type": "wsd",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([3702]))",
  "position_id": 84,
  "display_name": "wsd_amplifier_port"
}{
  "gid": "85",
  "name": "dns_flood",
  "dfmatch": "(df['protocol'] == 17) & (df['port.dst'] == 53) & (df['avg_pktlen'] > 500)",
  "comment": "",
  "order": "2905",
  "tag": "",
  "ddos_type": "udpflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "10000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.dst'] == 53) & (df['avg_pktlen'] > 500)",
  "position_id": 85,
  "display_name": "dns_flood"
}{
  "gid": "86",
  "name": "mdns_port",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 5353)",
  "comment": "",
  "order": "2050",
  "tag": "",
  "ddos_type": "mdns",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 5353)",
  "position_id": 86,
  "display_name": "mdns_port"
}{
  "gid": "87",
  "name": "plex_amplifier",
  "dfmatch": "((df['protocol'] == 17) & (df['port.src'].isin([32410,32414])))",
  "comment": "",
  "order": "2900",
  "tag": "",
  "ddos_type": "plex",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "((df['protocol'] == 17) & (df['port.src'].isin([32410,32414])))",
  "position_id": 87,
  "display_name": "plex_amplifier"
}{
  "gid": "88",
  "name": "tcp_ack_avg_pktlen_invariant_v4",
  "dfmatch": "(df['ip_version'] == 4) & (df['tcpflags'].isin([TCP_A, TCP_PA])) & (~df['genome.src'].str.contains('apple.com') & ~df['genome.src'].str.contains('google.com') & ~df['genome.src'].str.contains('facebook.com')) &  (( ~df['genome.dst'].str.contains('apple.com')) & ( ~df['genome.dst'].str.contains('google.com')) & ( ~df['genome.dst'].str.contains('facebook.com'))) & (df['avg_pktlen'].isin([ INVARIANT_ACK_PKTLEN ])) & (~df['avg_pktlen'].isin([0,40,52,72,1420,1452,1480,1492,1500])) & (df['port.dst'] < 1024) & ((( ~df['genome.dst'].str.contains('redge.com')) & ( ~df['genome.dst'].str.contains('cloudcctv.uplus.co.kr')) & ( ~df['genome.dst'].str.contains('stream.nos.pt')) & ( ~df['genome.dst'].str.contains('osiristrading.com')) & ( ~df['genome.dst'].str.contains('fbcdn.net')) & ( ~df['genome.dst'].str.contains('facebook.com')) & ( ~df['genome.dst'].str.contains('akamai.net')) & ( ~df['genome.dst'].str.contains('roblox.com')) & ( ~df['genome.dst'].str.contains('terabox.com')) & ( ~df['genome.dst'].str.contains('citrix')) & ( ~df['genome.dst'].str.contains('cloudflare.com')) & ( ~df['genome.dst'].str.contains('bytedance.com')) & ( ~df['genome.dst'].str.contains('cdn.bytedance.com')) & ( ~df['genome.dst'].str.contains('tiktok.com')) & ( ~df['genome.dst'].str.contains('cdn.tiktok.com')) & ( ~df['genome.dst'].str.contains('zenlayer.com'))) | (~df['avg_pktlen'].isin([46,80,109,1380,1432,1440,1495])))",
  "comment": "We need port.dst > 1024 for customer going to many web sites (e.g., 2920).\nGEN-527/DS-17716 - Exclude avg_pktlen 1452.\nSEC-112 - Exclude roblox.com and avg_pktlen 1440\nSEC-114 - Exclude terabox.com and avg_pktlen 1492\nSEC-127 - Exclude FANG from rule\nSEC-606 - Exclude avg_pktlen 1492",
  "order": "4505",
  "tag": "require_6.0",
  "ddos_type": "tcpackflood",
  "threat_level": "",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['ip_version'] == 4) & (df['tcpflags'].isin([TCP_A, TCP_PA])) & (~df['genome.src'].isin([ GENOME_FANG ])) &  (~df['genome.dst'].isin([ GENOME_FANG ])) & (df['avg_pktlen'].isin([ INVARIANT_ACK_PKTLEN ])) & (~df['avg_pktlen'].isin([0,40,52,72,1420,1452,1480,1492,1500])) & (df['port.dst'] < 1024) & ((~df['genome.dst'].isin([ GENOME_EXCEPTION_TCP_ACK_AVG_PKTLEN ])) | (~df['avg_pktlen'].isin([46,80,109,1380,1432,1440,1495])))",
  "position_id": 88,
  "display_name": "tcp_ack_avg_pktlen_invariant_v4"
}{
  "gid": "89",
  "name": "dns_large_outbound",
  "dfmatch": "(df['protocol'] == 17) & (df['port.dst'].isin([53])) & (df['avg_pktlen'] > 200) & (( ~df['genome.dst'].str.contains('dns.charter.com')) & ( ~df['genome.dst'].str.contains('doh.charter.com')) & ( ~df['genome.dst'].str.contains('dns.google.com')) & ( ~df['genome.dst'].str.contains('dns.cloudflare.com')) & ( ~df['genome.dst'].str.contains('dns.cloudflare.com')) & ( ~df['genome.dst'].str.contains('dns.apple.com')) & ( ~df['genome.dst'].str.contains('route53.amazonaws.com')) & ( ~df['genome.dst'].str.contains('root-servers.org')) & ( ~df['genome.dst'].str.contains('gtld-servers.net')) & ( ~df['genome.dst'].str.contains('dns.fortinet.com')) & ( ~df['genome.dst'].str.contains('quad9.net')) & ( ~df['genome.dst'].str.contains('dns.akamai.net')) & ( ~df['genome.dst'].str.contains('dns.azure.com')) & ( ~df['genome.dst'].str.contains('ultradns.com')) & ( ~df['genome.dst'].str.contains('dns.fastly.com')) & ( ~df['genome.dst'].str.contains('dns.amazonaws.com')) & ( ~df['genome.dst'].str.contains('dns.comcast.com')) & ( ~df['genome.dst'].str.contains('dns.microsoft.com')) & ( ~df['genome.dst'].str.contains('dns.alibaba.com')) & ( ~df['genome.dst'].str.contains('dns.baidu.com')) & ( ~df['genome.dst'].str.contains('dns.windstream.com')) & ( ~df['genome.dst'].str.contains('dns.verizon.com')) & ( ~df['genome.dst'].str.contains('dns.totalplay.com')) & ( ~df['genome.dst'].str.contains('dns.linode.com')) & ( ~df['genome.dst'].str.contains('dns.mediacomcable.com')) & ( ~df['genome.dst'].str.contains('dns.bouyguestelecom.fr')) & ( ~df['genome.dst'].str.contains('dns.continent8.com')) & ( ~df['genome.dst'].str.contains('dns.lumen.com')) & ( ~df['genome.dst'].str.contains('dns.ntt.com')) & ( ~df['genome.dst'].str.contains('dns.vodafone.com')) & ( ~df['genome.dst'].str.contains('dns.yandex.ru')) & ( ~df['genome.dst'].str.contains('opendns.com')) & ( ~df['genome.dst'].str.contains('dns.fdn.fr')) & ( ~df['genome.dst'].str.contains('dns.dnshome.de')) & ( ~df['genome.dst'].str.contains('dns.skbroadband.com')) & ( ~df['genome.dst'].str.contains('dns.lgcns.com')) & ( ~df['genome.dst'].str.contains('dns0.eu')) & ( ~df['genome.dst'].str.contains('dns.uplus.co.kr')) & ( ~df['genome.dst'].str.contains('dns.elisa.com')))",
  "comment": "",
  "order": "2910",
  "tag": "",
  "ddos_type": "dns",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.dst'].isin([53])) & (df['avg_pktlen'] > 200) & (~df['genome.dst'].isin([ GENOME_PUBLIC_DNS ]))",
  "position_id": 89,
  "display_name": "dns_large_outbound"
}{
  "gid": "91",
  "name": "jenkins_amplifier",
  "dfmatch": " ((df['protocol'] == 17) & (df['port.src'] == 33848))",
  "comment": "See 3160",
  "order": "2903",
  "tag": "",
  "ddos_type": "jenkins",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": " ((df['protocol'] == 17) & (df['port.src'] == 33848))",
  "position_id": 91,
  "display_name": "jenkins_amplifier"
}{
  "gid": "92",
  "name": "tcpflood_syn_count_by_dst_v2",
  "dfmatch": "(df['addr.dst:num_tcp_syn'] > 10000) & (df['tcpflags'].isin([TCP_S, TCP_SEC]))",
  "comment": "Work on Syn from few hosts in https://deepfield.atlassian.net/browse/GEN-258",
  "order": "3705",
  "tag": "",
  "ddos_type": "synflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "1",
  "pps_per_dst_24": "",
  "dfmatch_orig": "(df['addr.dst:num_tcp_syn'] > 10000) & (df['tcpflags'].isin([TCP_S, TCP_SEC]))",
  "position_id": 92,
  "display_name": "tcpflood_syn_count_by_dst_v2"
}{
  "gid": "93",
  "name": "udp_ttl_invariant_v4",
  "dfmatch": "(df['ip_version'] == 4) & (df['protocol'] == 17) & (df['ttl'] > 0) & (df['addr.dst:num_udp_addr_src_unique'] > 100) & (df['ttl'] == df['addr.dst:udp_ttl_invariant']) & (( ~df['genome.dst'].str.contains('facebook.com')) & ( ~df['genome.dst'].str.contains('fbcdn.net')) & ( ~df['genome.dst'].str.contains('continent8.com')) & ( ~df['genome.dst'].str.contains('playtech.com')) & ( ~df['genome.dst'].str.contains('igt.com')) & ( ~df['genome.dst'].str.contains('gamesyscorporate.com')) & ( ~df['genome.dst'].str.contains('apricot.co.im')) & ( ~df['genome.dst'].str.contains('google.com')) & ( ~df['genome.dst'].str.contains('cloudflare.com')) & ( ~df['genome.dst'].str.contains('vysiion.exponential-e.com')) & ( ~df['genome.dst'].str.contains('time.nist.gov')) & ( ~df['genome.dst'].str.contains('voip.windstream.com')) & ( ~df['genome.dst'].str.contains('anyconnect')) & ( ~df['genome.dst'].str.contains('balticservers.com')) & ( ~df['genome.dst'].str.contains('arkansas.gov')) & ( ~df['genome.dst'].str.contains('discord.com')) & ( ~df['genome.dst'].str.contains('telegram.org')) & ( ~df['genome.dst'].str.contains('connect_secure')) & ( ~df['genome.dst'].str.contains('meraki'))) & (~df['ttl'].isin([50,53,54,55,56,57,58,61])) & (( ~df['genome.src'].str.contains('apple.com')) & ( ~df['genome.src'].str.contains('facebook.com')) & ( ~df['genome.src'].str.contains('amazonaws.com')) & ( ~df['genome.src'].str.contains('cloudfront.com')) & ( ~df['genome.src'].str.contains('fbcdn.net')) & ( ~df['genome.src'].str.contains('continent8.com')) & ( ~df['genome.src'].str.contains('office.microsoft.com')) & ( ~df['genome.src'].str.contains('teams.microsoft.com')) & ( ~df['genome.src'].str.contains('torrent')) & ( ~df['genome.src'].str.contains('likely_vpn')) & ( ~df['genome.src'].str.contains('catonetworks.com')) & ( ~df['genome.src'].str.contains('google.com')) & ( ~df['genome.src'].str.contains('defense.gov')) & ( ~df['genome.src'].str.contains('blob.azure.com')) & ( ~df['genome.src'].str.contains('azure.com')) & ( ~df['genome.src'].str.contains('sharepoint.microsoft.com')) & ( ~df['genome.src'].str.contains('citrix.com')) & ( ~df['genome.src'].str.contains('360learning.com'))) & ((( ~df['genome.src'].str.contains('cache.google.com'))) | (~df['ttl'].isin([63]))) ",
  "comment": "See sample 3394",
  "order": "4305",
  "tag": "require_6.0",
  "ddos_type": "udpflood",
  "threat_level": "",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['ip_version'] == 4) & (df['protocol'] == 17) & (df['ttl'] > 0) & (df['addr.dst:num_udp_addr_src_unique'] > 100) & (df['ttl'] == df['addr.dst:udp_ttl_invariant']) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_TTL_DST ])) & (~df['ttl'].isin([50,53,54,55,56,57,58,61])) & (~df['genome.src'].isin([ GENOME_EXCEPTION_TTL ])) & ((~df['genome.src'].isin([ GENOME_SRC_EXCEPTION_UDP_TTL_INVARIANT ])) | (~df['ttl'].isin([63]))) ",
  "position_id": 93,
  "display_name": "udp_ttl_invariant_v4"
}{
  "gid": "95",
  "name": "tcp_portsrc_invariant_v4",
  "dfmatch": "(df['ip_version'] == 4) & (df['protocol'] == 6) & (df['port.src'].isin([ INVARIANT_TCP_SRCPORT ])) & ~(df['port.src'].isin([80,443]))",
  "comment": "",
  "order": "4510",
  "tag": "require_6.0",
  "ddos_type": "tcpflood",
  "threat_level": "",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['ip_version'] == 4) & (df['protocol'] == 6) & (df['port.src'].isin([ INVARIANT_TCP_SRCPORT ])) & ~(df['port.src'].isin([80,443]))",
  "position_id": 95,
  "display_name": "tcp_portsrc_invariant_v4"
}{
  "gid": "96",
  "name": "ubiquiti_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([10001]))",
  "comment": "",
  "order": "2855",
  "tag": "",
  "ddos_type": "ubiquiti",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([10001]))",
  "position_id": 96,
  "display_name": "ubiquiti_amplifier"
}{
  "gid": "97",
  "name": "ipv4_protocol_0",
  "dfmatch": "(df['ip_version']==4) & (df['protocol']==0)",
  "comment": "IPv4 Protocol 0 is an invalid protocol number, but is forwarded by most routers and layer-3 switches.",
  "order": "3810",
  "tag": "",
  "ddos_type": "protocolflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "dfmatch_orig": "(df['ip_version']==4) & (df['protocol']==0)",
  "position_id": 97,
  "display_name": "ipv4_protocol_0"
}{
  "gid": "98",
  "name": "rip_v1_amplification",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'] == 520)",
  "comment": "https://deepfield.atlassian.net/browse/DS-16777",
  "order": "1860",
  "tag": "",
  "ddos_type": "rip",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'] == 520)",
  "position_id": 98,
  "display_name": "rip_v1_amplification"
}{
  "gid": "99",
  "name": "dns_port_combo",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([53])) & (df['port.dst'].isin([22,23,53,80,110,427,443]))",
  "comment": "Missed some DNS AMP in 4169",
  "order": "1055",
  "tag": "",
  "ddos_type": "dns",
  "threat_level": "3",
  "num_unique_src_per_dst_24": "30",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "3,88",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([53])) & (df['port.dst'].isin([22,23,53,80,110,427,443]))",
  "position_id": 99,
  "display_name": "dns_port_combo"
}{
  "gid": "100",
  "name": "snmp_flood",
  "dfmatch": "(df['protocol'] == 17) & (df['port.dst'] == 161)",
  "comment": "",
  "order": "3155",
  "tag": "",
  "ddos_type": "udpflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "10000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.dst'] == 161)",
  "position_id": 100,
  "display_name": "snmp_flood"
}{
  "gid": "101",
  "name": "openvpn_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([1194,0])) & (df['genome.src'].str.contains('openvpn_amplifier'))",
  "comment": "New openvpn_amplifier rule - https://deepfield.atlassian.net/browse/DS-16583",
  "order": "1820",
  "tag": "",
  "ddos_type": "openvpn",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([1194,0])) & (df['genome.src'].str.contains('openvpn_amplifier'))",
  "position_id": 101,
  "display_name": "openvpn_amplifier"
}{
  "gid": "102",
  "name": "thirdparty_reputation",
  "dfmatch": "(df['protocol'].isin([1,6,17,47])) & (df['genome.src'].str.contains('botscout') | df['genome.src'].str.contains('blacklists') | df['genome.src'].str.contains('blocklist') | df['genome.src'].str.contains('ipsum') | df['genome.src'].str.contains('malicious') | df['genome.src'].str.contains('telnetlogin') | df['genome.src'].str.contains('zeek') | df['genome.src'].str.contains('cleantalk') | df['genome.src'].str.contains('blocklist_net_ua')) & (( ~df['genome.dst'].str.contains('ookla.com')) & ( ~df['genome.dst'].str.contains('fastly.com')) & ( ~df['genome.dst'].str.contains('akamai.net')) & ( ~df['genome.dst'].str.contains('stackpath.com')) & ( ~df['genome.dst'].str.contains('edg.io')) & ( ~df['genome.dst'].str.contains('facebook.com')) & ( ~df['genome.dst'].str.contains('tiktok.com')) & ( ~df['genome.dst'].str.contains('openconnect.netflix.com')) & ( ~df['genome.dst'].str.contains('instagram.com')) & ( ~df['genome.dst'].str.contains('google.com')) & ( ~df['genome.dst'].str.contains('apple.com')) & ( ~df['genome.dst'].str.contains('icloud.apple.com')) & ( ~df['genome.dst'].str.contains('cloudcctv.uplus.co.kr')) & ( ~df['genome.dst'].str.contains('discord.com')) & ( ~df['genome.dst'].str.contains('roblox.com')) & ( ~df['genome.dst'].str.contains('alphonso.tv')) & ( ~df['genome.dst'].str.contains('cdn.flow.com.ar')) & ( ~df['genome.dst'].str.contains('telegram.org')))",
  "comment": "Unusual traffic from third-party security reputation feed listed IPs",
  "order": "3153",
  "tag": "",
  "ddos_type": "botnet",
  "threat_level": "2",
  "num_unique_src_per_dst_24": "50",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'].isin([1,6,17,47])) & (df['genome.src'].isin([ GENOME_REPUTATION_THIRDPARTY ])) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_BOTNET ]))",
  "position_id": 102,
  "display_name": "thirdparty_reputation"
}{
  "gid": "103",
  "name": "known_scanners",
  "dfmatch": "df['protocol']==255",
  "comment": "Rule disabled as per SEC-65",
  "order": "1030",
  "tag": "require_999.0",
  "ddos_type": "scanning",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "1",
  "pps_per_dst_24": "20",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "73",
  "dfmatch_orig": "df['protocol']==255",
  "position_id": 103,
  "display_name": "known_scanners"
}{
  "gid": "104",
  "name": "tcp_ack_invalid_seq_ack_num",
  "dfmatch": "(df['extended_fields'] == 1) & (df['tcpflags'].isin([TCP_A])) & ((df['tcp_ack_num'] == 0) | (df['tcp_seq_num'] == 0) | (df['tcp_seq_num'] == df['tcp_ack_num']))",
  "comment": "ATH-602:  check the validity of the spm tcp flags.",
  "order": "4455",
  "tag": "require_24.4",
  "ddos_type": "tcpackflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['extended_fields'] == 1) & (df['tcpflags'].isin([TCP_A])) & ((df['tcp_ack_num'] == 0) | (df['tcp_seq_num'] == 0) | (df['tcp_seq_num'] == df['tcp_ack_num']))",
  "position_id": 104,
  "display_name": "tcp_ack_invalid_seq_ack_num"
}{
  "gid": "105",
  "name": "icmp_high_bps",
  "dfmatch": "(df['protocol'] == 1) & (~df['genome.src'].str.contains('dns.cloudflare.com') & ~df['genome.src'].str.contains('dns.google.com') & ~df['genome.src'].str.contains('www.microsoft.com') & ~df['genome.src'].str.contains('www.google.com') & ~df['genome.src'].str.contains('dns.lumen.com') & ~df['genome.src'].str.contains('opendns.com') & ~df['genome.src'].str.contains('dns.comcast.com') & ~df['genome.src'].str.contains('dns.uplus.co.kr') & ~df['genome.src'].str.contains('cloudflare.com')) & (~df['genome.src'].str.contains('bogon') & ~df['genome.src'].str.contains('rfc1918_space') & ~df['genome.src'].str.contains('reserved') & ~df['genome.src'].str.contains('private_v6')) & (( ~df['genome.dst'].str.contains('dns.cloudflare.com')) & ( ~df['genome.dst'].str.contains('dns.google.com')) & ( ~df['genome.dst'].str.contains('www.microsoft.com')) & ( ~df['genome.dst'].str.contains('www.google.com')) & ( ~df['genome.dst'].str.contains('dns.lumen.com')) & ( ~df['genome.dst'].str.contains('opendns.com')) & ( ~df['genome.dst'].str.contains('dns.comcast.com')) & ( ~df['genome.dst'].str.contains('dns.uplus.co.kr')) & ( ~df['genome.dst'].str.contains('cloudflare.com')))",
  "comment": "SEC-431 exclude flows from bogon sources (proxy for rfc1918 exclusion)",
  "order": "3605",
  "tag": "require_5.5",
  "ddos_type": "icmp",
  "threat_level": "1",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "10000000",
  "detection_mitigation_rules": "2",
  "dfmatch_orig": "(df['protocol'] == 1) & (~df['genome.src'].isin([ GENOME_EXCEPTION_ICMP ])) & (~df['genome.src'].isin([ GENOME_BOGONS ])) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_ICMP ]))",
  "position_id": 105,
  "display_name": "icmp_high_bps"
}{
  "gid": "106",
  "name": "tcpflood_small_ack_from_hosting_v4",
  "dfmatch": "(df['ip_version'] == 4) & (df['protocol'] == 6) & (df['tcpflags'].isin([TCP_P, TCP_PA])) & (df['avg_pktlen'] < 53)  & (df['genome.src'].str.contains('hetzner.de') | df['genome.src'].str.contains('scaleway.com') | df['genome.src'].str.contains('ec2.amazonaws.com') | df['genome.src'].str.contains('cloud.google.com') | df['genome.src'].str.contains('datacamp.co.uk') | df['genome.src'].str.contains('ovh.com') | df['genome.src'].str.contains('i3d.net') | df['genome.src'].str.contains('fdcservers.net') | df['genome.src'].str.contains('m247.com') | df['genome.src'].str.contains('24shells.net') | df['genome.src'].str.contains('performive.com') | df['genome.src'].str.contains('hostinger.com') | df['genome.src'].str.contains('tube-hosting.com') | df['genome.src'].str.contains('cloud.yandex.com') | df['genome.src'].str.contains('interserver.net') | df['genome.src'].str.contains('66.to') | df['genome.src'].str.contains('ztv.su') | df['genome.src'].str.contains('quadranet.com') | df['genome.src'].str.contains('chosting.solutions') | df['genome.src'].str.contains('h4y.us') | df['genome.src'].str.contains('heficed.com') | df['genome.src'].str.contains('linode.com') | df['genome.src'].str.contains('colocrossing.com') | df['genome.src'].str.contains('cloud.ibm.com') | df['genome.src'].str.contains('buyvm.net') | df['genome.src'].str.contains('limestonenetworks.com') | df['genome.src'].str.contains('sapinet.fr') | df['genome.src'].str.contains('hostslick.de') | df['genome.src'].str.contains('nuxt.cloud') | df['genome.src'].str.contains('globalsecurelayer.com') | df['genome.src'].str.contains('stark-industries.solutions') | df['genome.src'].str.contains('clouvider.com') | df['genome.src'].str.contains('bluevps.com') | df['genome.src'].str.contains('serverius.nl')) & (df['genome.dst'].str.contains('gov.mt'))",
  "comment": "For DEFBE-6208 block ack <= 52 from hosting to subscriber",
  "order": "4355",
  "tag": "require_5.5",
  "ddos_type": "tcpackflood",
  "threat_level": "",
  "num_unique_src_per_dst_24": "15",
  "pps_per_dst_24": "10000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['ip_version'] == 4) & (df['protocol'] == 6) & (df['tcpflags'].isin([TCP_P, TCP_PA])) & (df['avg_pktlen'] < 53)  & (df['genome.src'].isin([ GENOME_HOSTING ])) & (df['genome.dst'].isin([ GENOME_SUBSCRIBER ])) ",
  "position_id": 106,
  "display_name": "tcpflood_small_ack_from_hosting_v4"
}{
  "gid": "107",
  "name": "tcpflood_syn_from_hosting",
  "dfmatch": "(df['protocol'] == 6) & (df['tcpflags'].isin([TCP_S, TCP_SEC, TCP_SR, TCP_SRPA])) & (df['genome.src'].str.contains('hetzner.de') | df['genome.src'].str.contains('scaleway.com') | df['genome.src'].str.contains('ec2.amazonaws.com') | df['genome.src'].str.contains('cloud.google.com') | df['genome.src'].str.contains('datacamp.co.uk') | df['genome.src'].str.contains('ovh.com') | df['genome.src'].str.contains('i3d.net') | df['genome.src'].str.contains('fdcservers.net') | df['genome.src'].str.contains('m247.com') | df['genome.src'].str.contains('24shells.net') | df['genome.src'].str.contains('performive.com') | df['genome.src'].str.contains('hostinger.com') | df['genome.src'].str.contains('tube-hosting.com') | df['genome.src'].str.contains('cloud.yandex.com') | df['genome.src'].str.contains('interserver.net') | df['genome.src'].str.contains('66.to') | df['genome.src'].str.contains('ztv.su') | df['genome.src'].str.contains('quadranet.com') | df['genome.src'].str.contains('chosting.solutions') | df['genome.src'].str.contains('h4y.us') | df['genome.src'].str.contains('heficed.com') | df['genome.src'].str.contains('linode.com') | df['genome.src'].str.contains('colocrossing.com') | df['genome.src'].str.contains('cloud.ibm.com') | df['genome.src'].str.contains('buyvm.net') | df['genome.src'].str.contains('limestonenetworks.com') | df['genome.src'].str.contains('sapinet.fr') | df['genome.src'].str.contains('hostslick.de') | df['genome.src'].str.contains('nuxt.cloud') | df['genome.src'].str.contains('globalsecurelayer.com') | df['genome.src'].str.contains('stark-industries.solutions') | df['genome.src'].str.contains('clouvider.com') | df['genome.src'].str.contains('bluevps.com') | df['genome.src'].str.contains('serverius.nl')) & (df['genome.dst'].str.contains('gov.mt'))",
  "comment": "",
  "order": "4310",
  "tag": "require_5.5",
  "ddos_type": "synflood",
  "threat_level": "",
  "num_unique_src_per_dst_24": "20",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 6) & (df['tcpflags'].isin([TCP_S, TCP_SEC, TCP_SR, TCP_SRPA])) & (df['genome.src'].isin([ GENOME_HOSTING ])) & (df['genome.dst'].isin([ GENOME_SUBSCRIBER ]))",
  "position_id": 107,
  "display_name": "tcpflood_syn_from_hosting"
}{
  "gid": "108",
  "name": "dns_amplifier_public",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([53,0])) & (df['genome.src'].str.contains('dns.charter.com') | df['genome.src'].str.contains('doh.charter.com') | df['genome.src'].str.contains('dns.google.com') | df['genome.src'].str.contains('dns.cloudflare.com') | df['genome.src'].str.contains('dns.cloudflare.com') | df['genome.src'].str.contains('dns.apple.com') | df['genome.src'].str.contains('route53.amazonaws.com') | df['genome.src'].str.contains('root-servers.org') | df['genome.src'].str.contains('gtld-servers.net') | df['genome.src'].str.contains('dns.fortinet.com') | df['genome.src'].str.contains('quad9.net') | df['genome.src'].str.contains('dns.akamai.net') | df['genome.src'].str.contains('dns.azure.com') | df['genome.src'].str.contains('ultradns.com') | df['genome.src'].str.contains('dns.fastly.com') | df['genome.src'].str.contains('dns.amazonaws.com') | df['genome.src'].str.contains('dns.comcast.com') | df['genome.src'].str.contains('dns.microsoft.com') | df['genome.src'].str.contains('dns.alibaba.com') | df['genome.src'].str.contains('dns.baidu.com') | df['genome.src'].str.contains('dns.windstream.com') | df['genome.src'].str.contains('dns.verizon.com') | df['genome.src'].str.contains('dns.totalplay.com') | df['genome.src'].str.contains('dns.linode.com') | df['genome.src'].str.contains('dns.mediacomcable.com') | df['genome.src'].str.contains('dns.bouyguestelecom.fr') | df['genome.src'].str.contains('dns.continent8.com') | df['genome.src'].str.contains('dns.lumen.com') | df['genome.src'].str.contains('dns.ntt.com') | df['genome.src'].str.contains('dns.vodafone.com') | df['genome.src'].str.contains('dns.yandex.ru') | df['genome.src'].str.contains('opendns.com') | df['genome.src'].str.contains('dns.fdn.fr') | df['genome.src'].str.contains('dns.dnshome.de') | df['genome.src'].str.contains('dns.skbroadband.com') | df['genome.src'].str.contains('dns.lgcns.com') | df['genome.src'].str.contains('dns0.eu') | df['genome.src'].str.contains('dns.uplus.co.kr') | df['genome.src'].str.contains('dns.elisa.com')) & (df['genome.src'].str.contains('dns_all')) & (df['avg_pktlen'] > 1100)",
  "comment": "DS-17456 - capture DNS amplification from known DNS public servers ( GENOME_PUBLIC_DNS  ).",
  "order": "1110",
  "tag": "",
  "ddos_type": "dns",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([53,0])) & (df['genome.src'].isin([ GENOME_PUBLIC_DNS ])) & (df['genome.src'].str.contains('dns_all')) & (df['avg_pktlen'] > 1100)",
  "position_id": 108,
  "display_name": "dns_amplifier_public"
}{
  "gid": "109",
  "name": "sadp_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([37020,0])) & (df['genome.src'].str.contains('sadp'))",
  "comment": "",
  "order": "1810",
  "tag": "",
  "ddos_type": "sadp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([37020,0])) & (df['genome.src'].isin([ GENOME_AMPLIFIER_SADP ]))",
  "position_id": 109,
  "display_name": "sadp_amplifier"
}{
  "gid": "110",
  "name": "sadp_amplifier_port",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([37020]))",
  "comment": "",
  "order": "2010",
  "tag": "",
  "ddos_type": "sadp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([37020]))",
  "position_id": 110,
  "display_name": "sadp_amplifier_port"
}{
  "gid": "111",
  "name": "spss_amplifier",
  "dfmatch": "(df['protocol']==17) & (df['port.src'].isin([5093]))",
  "comment": "https://deepfield.atlassian.net/browse/GEN-338",
  "order": "1870",
  "tag": "",
  "ddos_type": "spss",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol']==17) & (df['port.src'].isin([5093]))",
  "position_id": 111,
  "display_name": "spss_amplifier"
}{
  "gid": "112",
  "name": "slp_amplifier",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([427,0])) & (df['genome.src'].str.contains('slp_amplifier'))",
  "comment": "",
  "order": "1830",
  "tag": "",
  "ddos_type": "slp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([427,0])) & (df['genome.src'].isin([ GENOME_AMPLIFIER_SLP ]))",
  "position_id": 112,
  "display_name": "slp_amplifier"
}{
  "gid": "113",
  "name": "slp_amplifier_port",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([427]))",
  "comment": "",
  "order": "2020",
  "tag": "",
  "ddos_type": "slp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([427]))",
  "position_id": 113,
  "display_name": "slp_amplifier_port"
}{
  "gid": "114",
  "name": "ipip_flood_v4",
  "dfmatch": "(df['ip_version'] == 4) & (df['protocol'] == 4)",
  "comment": "",
  "order": "4855",
  "tag": "require_5.5",
  "ddos_type": "ipipflood",
  "threat_level": "",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['ip_version'] == 4) & (df['protocol'] == 4)",
  "position_id": 114,
  "display_name": "ipip_flood_v4"
}{
  "gid": "115",
  "name": "botnet_noexceptions",
  "dfmatch": "(df['protocol'].isin([1,4,6,17,47])) & (df['genome.src'].str.contains('ddosbot'))",
  "comment": "",
  "order": "3151",
  "tag": "require_5.5",
  "ddos_type": "botnet",
  "threat_level": "",
  "num_unique_src_per_dst_24": "1000",
  "pps_per_dst_24": "100000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['protocol'].isin([1,4,6,17,47])) & (df['genome.src'].isin([ GENOME_BOTNET ]))",
  "position_id": 115,
  "display_name": "botnet_noexceptions"
}{
  "gid": "116",
  "name": "tcp_syn_invalid_seq_ack_num",
  "dfmatch": "(df['extended_fields'] == 1) & (df['tcpflags'].isin([TCP_S])) & (~(df['tcp_ack_num'] == 0) | (df['tcp_seq_num'] == 0))",
  "comment": "ATH-602:  check the validity of the spm tcp flags.",
  "order": "4460",
  "tag": "require_24.4",
  "ddos_type": "synflood",
  "threat_level": "",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "1000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['extended_fields'] == 1) & (df['tcpflags'].isin([TCP_S])) & (~(df['tcp_ack_num'] == 0) | (df['tcp_seq_num'] == 0))",
  "position_id": 116,
  "display_name": "tcp_syn_invalid_seq_ack_num"
}{
  "gid": "117",
  "name": "tcp_synack_invalid_seq_ack_num",
  "dfmatch": "(df['extended_fields'] == 1) & (df['tcpflags'].isin([TCP_SA])) & ((df['tcp_ack_num'] == 0) | (df['tcp_seq_num'] == 0) | (df['tcp_seq_num'] == df['tcp_ack_num']))",
  "comment": "ATH-602:  check the validity of the spm tcp flags.",
  "order": "4465",
  "tag": "require_24.4",
  "ddos_type": "tcpflood",
  "threat_level": "",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "1000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['extended_fields'] == 1) & (df['tcpflags'].isin([TCP_SA])) & ((df['tcp_ack_num'] == 0) | (df['tcp_seq_num'] == 0) | (df['tcp_seq_num'] == df['tcp_ack_num']))",
  "position_id": 117,
  "display_name": "tcp_synack_invalid_seq_ack_num"
}{
  "gid": "118",
  "name": "tcpflood_reset_ack",
  "dfmatch": "(df['protocol'] == 6) & (df['tcpflags'].isin([TCP_RA])) & (( ~df['genome.dst'].str.contains('alphonso.tv')) & ( ~df['genome.dst'].str.contains('akamai.net')) & ( ~df['genome.dst'].str.contains('telegram.org')) & ( ~df['genome.dst'].str.contains('osiristrading.com')))",
  "comment": "",
  "order": "4551",
  "tag": "",
  "ddos_type": "rstflood",
  "threat_level": "2",
  "num_unique_src_per_dst_24": "50",
  "pps_per_dst_24": "50000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 6) & (df['tcpflags'].isin([TCP_RA])) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_TCP_FLOOD_RESET ]))",
  "position_id": 118,
  "display_name": "tcpflood_reset_ack"
}{
  "gid": "119",
  "name": "proxy_high_bps",
  "dfmatch": "(df['protocol'].isin([6,17])) & ( (df['genome.src'].str.contains('tunnelbear.com') | df['genome.src'].str.contains('tor') | df['genome.src'].str.contains('sshplus') | df['genome.src'].str.contains('finevpn.org') | df['genome.src'].str.contains('nordvpn.com') | df['genome.src'].str.contains('torservers.net') | df['genome.src'].str.contains('surfeasy.com') | df['genome.src'].str.contains('hidemyass.com') | df['genome.src'].str.contains('cyberghostvpn.com') | df['genome.src'].str.contains('mullvad.net') | df['genome.src'].str.contains('vpn.opera.com') | df['genome.src'].str.contains('vpn.f-secure.com') | df['genome.src'].str.contains('surfshark.com') | df['genome.src'].str.contains('torproject.org') | df['genome.src'].str.contains('urban-vpn.com') | df['genome.src'].str.contains('unblock-us.com') | df['genome.src'].str.contains('vpn.avira.com') | df['genome.src'].str.contains('hide.me') | df['genome.src'].str.contains('airvpn.org') | df['genome.src'].str.contains('ovpn.com') | df['genome.src'].str.contains('fastestvpn.com') | df['genome.src'].str.contains('vpnunlimitedapp.com') | df['genome.src'].str.contains('ipvanish.com') | df['genome.src'].str.contains('pango.co') | df['genome.src'].str.contains('brightdata.com') | df['genome.src'].str.contains('soax.com') | df['genome.src'].str.contains('expressvpn.com') | df['genome.src'].str.contains('allsafevpn.com') | df['genome.src'].str.contains('ltesocks.xyz') | df['genome.src'].str.contains('proxylist') | df['genome.src'].str.contains('squid_cve') | df['genome.src'].str.contains('windscribe.com') | df['genome.src'].str.contains('possible_proxy') | df['genome.src'].str.contains('privateinternetaccess.com') | df['genome.src'].str.contains('touchvpn.net')) | (df['genome.src'].str.contains('proxy') | df['genome.src'].str.contains('socksproxy') | df['genome.src'].str.contains('hatunnel') | df['genome.src'].str.contains('softether') | df['genome.src'].str.contains('likely_vpn') | df['genome.src'].str.contains('anyconnect') | df['genome.src'].str.contains('catonetworks.com') | df['genome.src'].str.contains('f5_bigip') | df['genome.src'].str.contains('sonicwall') | df['genome.src'].str.contains('vpn.samsung.com') | df['genome.src'].str.contains('squid') | df['genome.src'].str.contains('citrix') | df['genome.src'].str.contains('fortinet') | df['genome.src'].str.contains('connect_secure')) ) & (~df['genome.src'].str.contains('proxygen'))",
  "comment": "Including wider definition of proxies, and setting higher cardinality + bps minimum.",
  "order": "3755",
  "tag": "require_5.5",
  "ddos_type": "botnet",
  "threat_level": "1",
  "num_unique_src_per_dst_24": "500",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "100000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'].isin([6,17])) & ( (df['genome.src'].isin([ GENOME_PROXY_ABUSE ])) | (df['genome.src'].isin([ GENOME_PROXY_UNVERIFIED ])) ) & (~df['genome.src'].str.contains('proxygen'))",
  "position_id": 119,
  "display_name": "proxy_high_bps"
}{
  "gid": "120",
  "name": "other_fragment_tcp",
  "dfmatch": "(df['protocol'] == 6) & (df['port.src'] == 0)",
  "comment": "PLM-2408",
  "order": "3360",
  "tag": "",
  "ddos_type": "fragment",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 6) & (df['port.src'] == 0)",
  "position_id": 120,
  "display_name": "other_fragment_tcp"
}{
  "gid": "121",
  "name": "udpflood_portdst_65535",
  "dfmatch": "(df['protocol'] == 17) & (df['port.dst'] == 65535)",
  "comment": "SEC-54: UDP Flood towards port 65535",
  "order": "4705",
  "tag": "",
  "ddos_type": "udpflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "1000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.dst'] == 65535)",
  "position_id": 121,
  "display_name": "udpflood_portdst_65535"
}{
  "gid": "122",
  "name": "tcpflood_ack_pkt_len_from_hosting",
  "dfmatch": "(df['protocol'] == 6) & (df['tcpflags'].isin([TCP_A])) & (df['avg_pktlen']==1040) & (df['genome.src'].str.contains('hetzner.de') | df['genome.src'].str.contains('scaleway.com') | df['genome.src'].str.contains('ec2.amazonaws.com') | df['genome.src'].str.contains('cloud.google.com') | df['genome.src'].str.contains('datacamp.co.uk') | df['genome.src'].str.contains('ovh.com') | df['genome.src'].str.contains('i3d.net') | df['genome.src'].str.contains('fdcservers.net') | df['genome.src'].str.contains('m247.com') | df['genome.src'].str.contains('24shells.net') | df['genome.src'].str.contains('performive.com') | df['genome.src'].str.contains('hostinger.com') | df['genome.src'].str.contains('tube-hosting.com') | df['genome.src'].str.contains('cloud.yandex.com') | df['genome.src'].str.contains('interserver.net') | df['genome.src'].str.contains('66.to') | df['genome.src'].str.contains('ztv.su') | df['genome.src'].str.contains('quadranet.com') | df['genome.src'].str.contains('chosting.solutions') | df['genome.src'].str.contains('h4y.us') | df['genome.src'].str.contains('heficed.com') | df['genome.src'].str.contains('linode.com') | df['genome.src'].str.contains('colocrossing.com') | df['genome.src'].str.contains('cloud.ibm.com') | df['genome.src'].str.contains('buyvm.net') | df['genome.src'].str.contains('limestonenetworks.com') | df['genome.src'].str.contains('sapinet.fr') | df['genome.src'].str.contains('hostslick.de') | df['genome.src'].str.contains('nuxt.cloud') | df['genome.src'].str.contains('globalsecurelayer.com') | df['genome.src'].str.contains('stark-industries.solutions') | df['genome.src'].str.contains('clouvider.com') | df['genome.src'].str.contains('bluevps.com') | df['genome.src'].str.contains('serverius.nl'))",
  "comment": "SEC-35: Observed in attack samples GID 6582 and 6766, sources from hosting sending TCP_A with avg_pktlen 1040",
  "order": "4360",
  "tag": "require_5.5",
  "ddos_type": "tcpackflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "15",
  "pps_per_dst_24": "10000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 6) & (df['tcpflags'].isin([TCP_A])) & (df['avg_pktlen']==1040) & (df['genome.src'].isin([ GENOME_HOSTING ]))",
  "position_id": 122,
  "display_name": "tcpflood_ack_pkt_len_from_hosting"
}{
  "gid": "123",
  "name": "gre_pktlen_ipv4",
  "dfmatch": "(df['ip_version'] == 4) & (df['protocol'] == 47) &  (df['avg_pktlen'] < 44)",
  "comment": "",
  "order": "4060",
  "tag": "",
  "ddos_type": "greflood",
  "threat_level": "5",
  "num_unique_src_per_dst_24": "20",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['ip_version'] == 4) & (df['protocol'] == 47) &  (df['avg_pktlen'] < 44)",
  "position_id": 123,
  "display_name": "gre_pktlen_ipv4"
}{
  "gid": "124",
  "name": "gre_pktlen_ipv6",
  "dfmatch": "(df['ip_version'] == 6) & (df['protocol'] == 47) &  (df['avg_pktlen'] < 68)",
  "comment": "",
  "order": "4061",
  "tag": "",
  "ddos_type": "greflood",
  "threat_level": "5",
  "num_unique_src_per_dst_24": "20",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['ip_version'] == 6) & (df['protocol'] == 47) &  (df['avg_pktlen'] < 68)",
  "position_id": 124,
  "display_name": "gre_pktlen_ipv6"
}{
  "gid": "125",
  "name": "flood_6672",
  "dfmatch": "(df['protocol'] == 17) & (df['port.dst'] == 6672)",
  "comment": "",
  "order": "3180",
  "tag": "",
  "ddos_type": "udpflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "10000",
  "bps_per_dst_24": "10000",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.dst'] == 6672)",
  "position_id": 125,
  "display_name": "flood_6672"
}{
  "gid": "126",
  "name": "quic_from_hosting",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src']>1024)  & (df['port.dst'].isin([80])) & (df['genome.src'].str.contains('hetzner.de') | df['genome.src'].str.contains('scaleway.com') | df['genome.src'].str.contains('ec2.amazonaws.com') | df['genome.src'].str.contains('cloud.google.com') | df['genome.src'].str.contains('datacamp.co.uk') | df['genome.src'].str.contains('ovh.com') | df['genome.src'].str.contains('i3d.net') | df['genome.src'].str.contains('fdcservers.net') | df['genome.src'].str.contains('m247.com') | df['genome.src'].str.contains('24shells.net') | df['genome.src'].str.contains('performive.com') | df['genome.src'].str.contains('hostinger.com') | df['genome.src'].str.contains('tube-hosting.com') | df['genome.src'].str.contains('cloud.yandex.com') | df['genome.src'].str.contains('interserver.net') | df['genome.src'].str.contains('66.to') | df['genome.src'].str.contains('ztv.su') | df['genome.src'].str.contains('quadranet.com') | df['genome.src'].str.contains('chosting.solutions') | df['genome.src'].str.contains('h4y.us') | df['genome.src'].str.contains('heficed.com') | df['genome.src'].str.contains('linode.com') | df['genome.src'].str.contains('colocrossing.com') | df['genome.src'].str.contains('cloud.ibm.com') | df['genome.src'].str.contains('buyvm.net') | df['genome.src'].str.contains('limestonenetworks.com') | df['genome.src'].str.contains('sapinet.fr') | df['genome.src'].str.contains('hostslick.de') | df['genome.src'].str.contains('nuxt.cloud') | df['genome.src'].str.contains('globalsecurelayer.com') | df['genome.src'].str.contains('stark-industries.solutions') | df['genome.src'].str.contains('clouvider.com') | df['genome.src'].str.contains('bluevps.com') | df['genome.src'].str.contains('serverius.nl')) & (df['genome.dst'].str.contains('ookla.com') | df['genome.dst'].str.contains('fastly.com') | df['genome.dst'].str.contains('akamai.net') | df['genome.dst'].str.contains('stackpath.com') | df['genome.dst'].str.contains('edg.io') | df['genome.dst'].str.contains('facebook.com') | df['genome.dst'].str.contains('tiktok.com') | df['genome.dst'].str.contains('openconnect.netflix.com') | df['genome.dst'].str.contains('instagram.com') | df['genome.dst'].str.contains('google.com') | df['genome.dst'].str.contains('apple.com') | df['genome.dst'].str.contains('icloud.apple.com') | df['genome.dst'].str.contains('cloudcctv.uplus.co.kr') | df['genome.dst'].str.contains('discord.com') | df['genome.dst'].str.contains('roblox.com') | df['genome.dst'].str.contains('alphonso.tv') | df['genome.dst'].str.contains('cdn.flow.com.ar') | df['genome.dst'].str.contains('telegram.org'))",
  "comment": "Classifying UDP/80 floods to start.",
  "order": "4360",
  "tag": "require_5.5",
  "ddos_type": "botnet",
  "threat_level": "20",
  "num_unique_src_per_dst_24": "5",
  "pps_per_dst_24": "100000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src']>1024)  & (df['port.dst'].isin([80])) & (df['genome.src'].isin([ GENOME_HOSTING ])) & (df['genome.dst'].isin([ GENOME_EXCEPTION_BOTNET ]))",
  "position_id": 126,
  "display_name": "quic_from_hosting"
}{
  "gid": "127",
  "name": "dns_small_pkt_v4",
  "dfmatch": "(df['ip_version'] == 4) & (df['protocol'] == 17) & (df['port.dst'] == 53) & (df['avg_pktlen'] < 50) & (( ~df['genome.dst'].str.contains('doh.charter.com')) & ( ~df['genome.dst'].str.contains('dns.google.com')) & ( ~df['genome.dst'].str.contains('dns.cloudflare.com')) & ( ~df['genome.dst'].str.contains('dns.apple.com')) & ( ~df['genome.dst'].str.contains('dns.fortinet.com')) & ( ~df['genome.dst'].str.contains('quad9.net')) & ( ~df['genome.dst'].str.contains('ultradns.com')) & ( ~df['genome.dst'].str.contains('dns.comcast.com')) & ( ~df['genome.dst'].str.contains('dns.alibaba.com')) & ( ~df['genome.dst'].str.contains('dns.baidu.com')) & ( ~df['genome.dst'].str.contains('dns.windstream.com')) & ( ~df['genome.dst'].str.contains('dns.verizon.com')) & ( ~df['genome.dst'].str.contains('dns.mediacomcable.com')) & ( ~df['genome.dst'].str.contains('dns.bouyguestelecom.fr')) & ( ~df['genome.dst'].str.contains('dns.lumen.com')) & ( ~df['genome.dst'].str.contains('dns.ntt.com')) & ( ~df['genome.dst'].str.contains('dns.skbroadband.com')) & ( ~df['genome.dst'].str.contains('dns.lgcns.com')) & ( ~df['genome.dst'].str.contains('dns0.eu')) & ( ~df['genome.dst'].str.contains('dns.uplus.co.kr'))) & (( ~df['genome.dst'].str.contains('root-servers.net'))) & (( ~df['genome.dst'].str.contains('gtld-servers.net')) & ( ~df['genome.dst'].str.contains('gov.stld')) & ( ~df['genome.dst'].str.contains('int.stld')) & ( ~df['genome.dst'].str.contains('mil.stld')) & ( ~df['genome.dst'].str.contains('biz.gtld'))) & (( ~df['genome.dst'].str.contains('co.cctld')) & ( ~df['genome.dst'].str.contains('kr.cctld')) & ( ~df['genome.dst'].str.contains('fr.cctld')) & ( ~df['genome.dst'].str.contains('us.cctld')) & ( ~df['genome.dst'].str.contains('cn.cctld')) & ( ~df['genome.dst'].str.contains('tk.cctld')) & ( ~df['genome.dst'].str.contains('uk.cctld')) & ( ~df['genome.dst'].str.contains('ru.cctld')) & ( ~df['genome.dst'].str.contains('de.cctld')) & ( ~df['genome.dst'].str.contains('nl.cctld')) & ( ~df['genome.dst'].str.contains('br.cctld')) & ( ~df['genome.dst'].str.contains('jp.cctld')) & ( ~df['genome.dst'].str.contains('au.cctld')) & ( ~df['genome.dst'].str.contains('eu.cctld')) & ( ~df['genome.dst'].str.contains('it.cctld')) & ( ~df['genome.dst'].str.contains('ca.cctld')) & ( ~df['genome.dst'].str.contains('pl.cctld')) & ( ~df['genome.dst'].str.contains('lt.cctld')) & ( ~df['genome.dst'].str.contains('fi.cctld')) & ( ~df['genome.dst'].str.contains('at.cctld')) & ( ~df['genome.dst'].str.contains('es.cctld')) & ( ~df['genome.dst'].str.contains('se.cctld')) & ( ~df['genome.dst'].str.contains('in.cctld')) & ( ~df['genome.dst'].str.contains('id.cctld')) & ( ~df['genome.dst'].str.contains('za.cctld')) & ( ~df['genome.dst'].str.contains('ai.cctld'))) & (( ~df['genome.dst'].str.contains('dns.charter.com')) & ( ~df['genome.dst'].str.contains('doh.charter.com')) & ( ~df['genome.dst'].str.contains('ns.google.com')) & ( ~df['genome.dst'].str.contains('ns.cloudflare.com')) & ( ~df['genome.dst'].str.contains('ns.apple.com')) & ( ~df['genome.dst'].str.contains('route53.amazonaws.com')) & ( ~df['genome.dst'].str.contains('dns.akamai.net')) & ( ~df['genome.dst'].str.contains('dns.azure.com')) & ( ~df['genome.dst'].str.contains('dns.fastly.com')) & ( ~df['genome.dst'].str.contains('dns.amazonaws.com')) & ( ~df['genome.dst'].str.contains('dns.microsoft.com')) & ( ~df['genome.dst'].str.contains('ns.alibaba.com')) & ( ~df['genome.dst'].str.contains('dns.totalplay.com')) & ( ~df['genome.dst'].str.contains('dns.linode.com')) & ( ~df['genome.dst'].str.contains('ns.bouyguestelecom.fr')) & ( ~df['genome.dst'].str.contains('dns.continent8.com')) & ( ~df['genome.dst'].str.contains('ns.lumen.com')) & ( ~df['genome.dst'].str.contains('dns.ntt.com')) & ( ~df['genome.dst'].str.contains('dns.fdn.fr')) & ( ~df['genome.dst'].str.contains('ns.skbroadband.com')) & ( ~df['genome.dst'].str.contains('ns.uplus.co.kr')) & ( ~df['genome.dst'].str.contains('dns.elisa.com')) & ( ~df['genome.dst'].str.contains('ns.windstream.com')))",
  "comment": "DNS queries are expected to be at least 50 bytes in IPv4: 20 (IPv4 header) + 8 (UDP header) + 12 (DNS header) + 6 (query name) + 4 (query type/class) = 50 bytes",
  "order": "1110",
  "tag": "",
  "ddos_type": "dns",
  "threat_level": "1",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "10000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['ip_version'] == 4) & (df['protocol'] == 17) & (df['port.dst'] == 53) & (df['avg_pktlen'] < 50) & (~df['genome.dst'].isin([ GENOME_PUBLIC_DNS ])) & (~df['genome.dst'].isin([ GENOME_DNS_ROOT ])) & (~df['genome.dst'].isin([ GENOME_DNS_GTLD ])) & (~df['genome.dst'].isin([ GENOME_DNS_CCTLD ])) & (~df['genome.dst'].isin([ GENOME_DNS_NAMESERVERS ]))",
  "position_id": 127,
  "display_name": "dns_small_pkt_v4"
}{
  "gid": "128",
  "name": "dns_small_pkt_v6",
  "dfmatch": "(df['ip_version'] == 6) & (df['protocol'] == 17) & (df['port.dst'] == 53) & (df['avg_pktlen'] < 70) & (( ~df['genome.dst'].str.contains('doh.charter.com')) & ( ~df['genome.dst'].str.contains('dns.google.com')) & ( ~df['genome.dst'].str.contains('dns.cloudflare.com')) & ( ~df['genome.dst'].str.contains('dns.apple.com')) & ( ~df['genome.dst'].str.contains('dns.fortinet.com')) & ( ~df['genome.dst'].str.contains('quad9.net')) & ( ~df['genome.dst'].str.contains('ultradns.com')) & ( ~df['genome.dst'].str.contains('dns.comcast.com')) & ( ~df['genome.dst'].str.contains('dns.alibaba.com')) & ( ~df['genome.dst'].str.contains('dns.baidu.com')) & ( ~df['genome.dst'].str.contains('dns.windstream.com')) & ( ~df['genome.dst'].str.contains('dns.verizon.com')) & ( ~df['genome.dst'].str.contains('dns.mediacomcable.com')) & ( ~df['genome.dst'].str.contains('dns.bouyguestelecom.fr')) & ( ~df['genome.dst'].str.contains('dns.lumen.com')) & ( ~df['genome.dst'].str.contains('dns.ntt.com')) & ( ~df['genome.dst'].str.contains('dns.skbroadband.com')) & ( ~df['genome.dst'].str.contains('dns.lgcns.com')) & ( ~df['genome.dst'].str.contains('dns0.eu')) & ( ~df['genome.dst'].str.contains('dns.uplus.co.kr'))) & (( ~df['genome.dst'].str.contains('root-servers.net'))) & (( ~df['genome.dst'].str.contains('gtld-servers.net')) & ( ~df['genome.dst'].str.contains('gov.stld')) & ( ~df['genome.dst'].str.contains('int.stld')) & ( ~df['genome.dst'].str.contains('mil.stld')) & ( ~df['genome.dst'].str.contains('biz.gtld'))) & (( ~df['genome.dst'].str.contains('co.cctld')) & ( ~df['genome.dst'].str.contains('kr.cctld')) & ( ~df['genome.dst'].str.contains('fr.cctld')) & ( ~df['genome.dst'].str.contains('us.cctld')) & ( ~df['genome.dst'].str.contains('cn.cctld')) & ( ~df['genome.dst'].str.contains('tk.cctld')) & ( ~df['genome.dst'].str.contains('uk.cctld')) & ( ~df['genome.dst'].str.contains('ru.cctld')) & ( ~df['genome.dst'].str.contains('de.cctld')) & ( ~df['genome.dst'].str.contains('nl.cctld')) & ( ~df['genome.dst'].str.contains('br.cctld')) & ( ~df['genome.dst'].str.contains('jp.cctld')) & ( ~df['genome.dst'].str.contains('au.cctld')) & ( ~df['genome.dst'].str.contains('eu.cctld')) & ( ~df['genome.dst'].str.contains('it.cctld')) & ( ~df['genome.dst'].str.contains('ca.cctld')) & ( ~df['genome.dst'].str.contains('pl.cctld')) & ( ~df['genome.dst'].str.contains('lt.cctld')) & ( ~df['genome.dst'].str.contains('fi.cctld')) & ( ~df['genome.dst'].str.contains('at.cctld')) & ( ~df['genome.dst'].str.contains('es.cctld')) & ( ~df['genome.dst'].str.contains('se.cctld')) & ( ~df['genome.dst'].str.contains('in.cctld')) & ( ~df['genome.dst'].str.contains('id.cctld')) & ( ~df['genome.dst'].str.contains('za.cctld')) & ( ~df['genome.dst'].str.contains('ai.cctld'))) & (( ~df['genome.dst'].str.contains('dns.charter.com')) & ( ~df['genome.dst'].str.contains('doh.charter.com')) & ( ~df['genome.dst'].str.contains('ns.google.com')) & ( ~df['genome.dst'].str.contains('ns.cloudflare.com')) & ( ~df['genome.dst'].str.contains('ns.apple.com')) & ( ~df['genome.dst'].str.contains('route53.amazonaws.com')) & ( ~df['genome.dst'].str.contains('dns.akamai.net')) & ( ~df['genome.dst'].str.contains('dns.azure.com')) & ( ~df['genome.dst'].str.contains('dns.fastly.com')) & ( ~df['genome.dst'].str.contains('dns.amazonaws.com')) & ( ~df['genome.dst'].str.contains('dns.microsoft.com')) & ( ~df['genome.dst'].str.contains('ns.alibaba.com')) & ( ~df['genome.dst'].str.contains('dns.totalplay.com')) & ( ~df['genome.dst'].str.contains('dns.linode.com')) & ( ~df['genome.dst'].str.contains('ns.bouyguestelecom.fr')) & ( ~df['genome.dst'].str.contains('dns.continent8.com')) & ( ~df['genome.dst'].str.contains('ns.lumen.com')) & ( ~df['genome.dst'].str.contains('dns.ntt.com')) & ( ~df['genome.dst'].str.contains('dns.fdn.fr')) & ( ~df['genome.dst'].str.contains('ns.skbroadband.com')) & ( ~df['genome.dst'].str.contains('ns.uplus.co.kr')) & ( ~df['genome.dst'].str.contains('dns.elisa.com')) & ( ~df['genome.dst'].str.contains('ns.windstream.com')))",
  "comment": "DNS queries are expected to be at least 70 bytes in IPv6: 40 (IPv6 header) + 8 (UDP header) + 12 (DNS header) + 6 (query name) + 4 (query type/class) = 50 bytes",
  "order": "1115",
  "tag": "",
  "ddos_type": "dns",
  "threat_level": "1",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "10000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['ip_version'] == 6) & (df['protocol'] == 17) & (df['port.dst'] == 53) & (df['avg_pktlen'] < 70) & (~df['genome.dst'].isin([ GENOME_PUBLIC_DNS ])) & (~df['genome.dst'].isin([ GENOME_DNS_ROOT ])) & (~df['genome.dst'].isin([ GENOME_DNS_GTLD ])) & (~df['genome.dst'].isin([ GENOME_DNS_CCTLD ])) & (~df['genome.dst'].isin([ GENOME_DNS_NAMESERVERS ]))",
  "position_id": 128,
  "display_name": "dns_small_pkt_v6"
}{
  "gid": "129",
  "name": "tcpflood_syn_pkt_len_v6",
  "dfmatch": "(df['ip_version'] == 6) & (df['protocol'] == 6) & (df['tcpflags'].isin([TCP_S, TCP_SEC, TCP_SC, TCP_SE] )) & ((df['avg_pktlen'] < 60) | (df['avg_pktlen'] > 84))",
  "comment": "",
  "order": "3651",
  "tag": "",
  "ddos_type": "synflood",
  "threat_level": "100",
  "num_unique_src_per_dst_24": "1",
  "pps_per_dst_24": "1000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['ip_version'] == 6) & (df['protocol'] == 6) & (df['tcpflags'].isin([TCP_S, TCP_SEC, TCP_SC, TCP_SE] )) & ((df['avg_pktlen'] < 60) | (df['avg_pktlen'] > 84))",
  "position_id": 129,
  "display_name": "tcpflood_syn_pkt_len_v6"
}{
  "gid": "130",
  "name": "tcpflood_ack_pkt_len_v6",
  "dfmatch": "(df['ip_version'] == 6) & (df['protocol'] == 6) & (df['tcpflags'] == TCP_A) & ((df['avg_pktlen'] < 60) )",
  "comment": "",
  "order": "4351",
  "tag": "",
  "ddos_type": "tcpackflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "25",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['ip_version'] == 6) & (df['protocol'] == 6) & (df['tcpflags'] == TCP_A) & ((df['avg_pktlen'] < 60) )",
  "position_id": 130,
  "display_name": "tcpflood_ack_pkt_len_v6"
}{
  "gid": "131",
  "name": "udp_pktlen_v6",
  "dfmatch": "(df['ip_version'] == 6) & (df['protocol'] == 17) &  (df['avg_pktlen'] < 50)",
  "comment": "",
  "order": "4055",
  "tag": "",
  "ddos_type": "udpflood",
  "threat_level": "5",
  "num_unique_src_per_dst_24": "20",
  "pps_per_dst_24": "10000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['ip_version'] == 6) & (df['protocol'] == 17) &  (df['avg_pktlen'] < 50)",
  "position_id": 131,
  "display_name": "udp_pktlen_v6"
}{
  "gid": "132",
  "name": "protocol_flood_v6",
  "dfmatch": "(df['ip_version'] == 6) & (~df['protocol'].isin([0,4,6,17,47,50,58,97,115]))",
  "comment": "Random protocol flood (e.g. attack https://library.deepfield.net/attack/170)",
  "order": "3800",
  "tag": "",
  "ddos_type": "protocolflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "5000",
  "bps_per_dst_24": "",
  "dfmatch_orig": "(df['ip_version'] == 6) & (~df['protocol'].isin([0,4,6,17,47,50,58,97,115]))",
  "position_id": 132,
  "display_name": "protocol_flood_v6"
}{
  "gid": "133",
  "name": "dns_randomdomain",
  "dfmatch": "(df['payload'] == 1) & (df['protocol'] == 17) & (df['port.dst'] == 53) & (df['dns_entropy'] > 4)",
  "comment": "",
  "order": "1040",
  "tag": "require_999.0",
  "ddos_type": "dnsrandom",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "1",
  "bps_per_dst_24": "1",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['payload'] == 1) & (df['protocol'] == 17) & (df['port.dst'] == 53) & (df['dns_entropy'] > 4)",
  "enabled": false,
  "position_id": 133,
  "display_name": "dns_randomdomain"
}{
  "gid": "134",
  "name": "udpflood_from_hosting",
  "dfmatch": "(df['protocol'] == 17) & (df['genome.src'].str.contains('hetzner.de') | df['genome.src'].str.contains('scaleway.com') | df['genome.src'].str.contains('ec2.amazonaws.com') | df['genome.src'].str.contains('cloud.google.com') | df['genome.src'].str.contains('datacamp.co.uk') | df['genome.src'].str.contains('ovh.com') | df['genome.src'].str.contains('i3d.net') | df['genome.src'].str.contains('fdcservers.net') | df['genome.src'].str.contains('m247.com') | df['genome.src'].str.contains('24shells.net') | df['genome.src'].str.contains('performive.com') | df['genome.src'].str.contains('hostinger.com') | df['genome.src'].str.contains('tube-hosting.com') | df['genome.src'].str.contains('cloud.yandex.com') | df['genome.src'].str.contains('interserver.net') | df['genome.src'].str.contains('66.to') | df['genome.src'].str.contains('ztv.su') | df['genome.src'].str.contains('quadranet.com') | df['genome.src'].str.contains('chosting.solutions') | df['genome.src'].str.contains('h4y.us') | df['genome.src'].str.contains('heficed.com') | df['genome.src'].str.contains('linode.com') | df['genome.src'].str.contains('colocrossing.com') | df['genome.src'].str.contains('cloud.ibm.com') | df['genome.src'].str.contains('buyvm.net') | df['genome.src'].str.contains('limestonenetworks.com') | df['genome.src'].str.contains('sapinet.fr') | df['genome.src'].str.contains('hostslick.de') | df['genome.src'].str.contains('nuxt.cloud') | df['genome.src'].str.contains('globalsecurelayer.com') | df['genome.src'].str.contains('stark-industries.solutions') | df['genome.src'].str.contains('clouvider.com') | df['genome.src'].str.contains('bluevps.com') | df['genome.src'].str.contains('serverius.nl')) & (df['port.src'] > 1024) & (df['port.dst'] > 1024) & (~df['genome.src'].str.contains('nordvpn.com') & ~df['genome.src'].str.contains('cyberghostvpn.com') & ~df['genome.src'].str.contains('discord.com') & ~df['genome.src'].str.contains('jitolabs') & ~df['genome.src'].str.contains('solana.com') & ~df['genome.src'].str.contains('triton.one') & ~df['genome.src'].str.contains('prometheus')) & (~df['genome.src'].str.contains('voip.windstream.com') & ~df['genome.src'].str.contains('voip.verizon.com') & ~df['genome.src'].str.contains('voip.charter.com') & ~df['genome.src'].str.contains('voip.level3.com') & ~df['genome.src'].str.contains('voip.comcast.com') & ~df['genome.src'].str.contains('voip.cogent.com') & ~df['genome.src'].str.contains('voip.evolveip.net') & ~df['genome.src'].str.contains('voip.tmobile.com') & ~df['genome.src'].str.contains('voip.telefonica.com') & ~df['genome.src'].str.contains('voip.att.com') & ~df['genome.src'].str.contains('peerlessnetwork.com') & ~df['genome.src'].str.contains('bandwidth.com') & ~df['genome.src'].str.contains('inteliquent.com') & ~df['genome.src'].str.contains('hypercube-llc.com') & ~df['genome.src'].str.contains('o1.com') & ~df['genome.src'].str.contains('382com.com') & ~df['genome.src'].str.contains('nos.com') & ~df['genome.src'].str.contains('excel.com') & ~df['genome.src'].str.contains('impacthostedpbx.com') & ~df['genome.src'].str.contains('aninetworks.com') & ~df['genome.src'].str.contains('vonage.com') & ~df['genome.src'].str.contains('brightlinkcom.com') & ~df['genome.src'].str.contains('idt.net')) & (( ~df['genome.dst'].str.contains('voip.windstream.com')) & ( ~df['genome.dst'].str.contains('voip.verizon.com')) & ( ~df['genome.dst'].str.contains('voip.charter.com')) & ( ~df['genome.dst'].str.contains('voip.level3.com')) & ( ~df['genome.dst'].str.contains('voip.comcast.com')) & ( ~df['genome.dst'].str.contains('voip.cogent.com')) & ( ~df['genome.dst'].str.contains('voip.evolveip.net')) & ( ~df['genome.dst'].str.contains('voip.tmobile.com')) & ( ~df['genome.dst'].str.contains('voip.telefonica.com')) & ( ~df['genome.dst'].str.contains('voip.att.com')) & ( ~df['genome.dst'].str.contains('peerlessnetwork.com')) & ( ~df['genome.dst'].str.contains('bandwidth.com')) & ( ~df['genome.dst'].str.contains('inteliquent.com')) & ( ~df['genome.dst'].str.contains('hypercube-llc.com')) & ( ~df['genome.dst'].str.contains('o1.com')) & ( ~df['genome.dst'].str.contains('382com.com')) & ( ~df['genome.dst'].str.contains('nos.com')) & ( ~df['genome.dst'].str.contains('excel.com')) & ( ~df['genome.dst'].str.contains('impacthostedpbx.com')) & ( ~df['genome.dst'].str.contains('aninetworks.com')) & ( ~df['genome.dst'].str.contains('vonage.com')) & ( ~df['genome.dst'].str.contains('brightlinkcom.com')) & ( ~df['genome.dst'].str.contains('idt.net'))) & (~df['port.src'].isin([4500,51820,5349]))",
  "comment": "Created due to SEC-156 ( lgu )\nException port 4500 and 51820 due to SEC-273",
  "order": "4370",
  "tag": "",
  "ddos_type": "udpflood",
  "threat_level": "1",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "50000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['genome.src'].isin([ GENOME_HOSTING ])) & (df['port.src'] > 1024) & (df['port.dst'] > 1024) & (~df['genome.src'].isin([ GENOME_EXCEPTION_UDP_FLOOD_HOSTING ])) & (~df['genome.src'].isin([ GENOME_EXCEPTION_VOIP ])) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_VOIP ])) & (~df['port.src'].isin([4500,51820,5349]))",
  "position_id": 134,
  "display_name": "udpflood_from_hosting"
}{
  "gid": "135",
  "name": "greflood_from_hosting",
  "dfmatch": "(df['protocol'].isin([47])) & (df['genome.src'].str.contains('hetzner.de') | df['genome.src'].str.contains('scaleway.com') | df['genome.src'].str.contains('ec2.amazonaws.com') | df['genome.src'].str.contains('cloud.google.com') | df['genome.src'].str.contains('datacamp.co.uk') | df['genome.src'].str.contains('ovh.com') | df['genome.src'].str.contains('i3d.net') | df['genome.src'].str.contains('fdcservers.net') | df['genome.src'].str.contains('m247.com') | df['genome.src'].str.contains('24shells.net') | df['genome.src'].str.contains('performive.com') | df['genome.src'].str.contains('hostinger.com') | df['genome.src'].str.contains('tube-hosting.com') | df['genome.src'].str.contains('cloud.yandex.com') | df['genome.src'].str.contains('interserver.net') | df['genome.src'].str.contains('66.to') | df['genome.src'].str.contains('ztv.su') | df['genome.src'].str.contains('quadranet.com') | df['genome.src'].str.contains('chosting.solutions') | df['genome.src'].str.contains('h4y.us') | df['genome.src'].str.contains('heficed.com') | df['genome.src'].str.contains('linode.com') | df['genome.src'].str.contains('colocrossing.com') | df['genome.src'].str.contains('cloud.ibm.com') | df['genome.src'].str.contains('buyvm.net') | df['genome.src'].str.contains('limestonenetworks.com') | df['genome.src'].str.contains('sapinet.fr') | df['genome.src'].str.contains('hostslick.de') | df['genome.src'].str.contains('nuxt.cloud') | df['genome.src'].str.contains('globalsecurelayer.com') | df['genome.src'].str.contains('stark-industries.solutions') | df['genome.src'].str.contains('clouvider.com') | df['genome.src'].str.contains('bluevps.com') | df['genome.src'].str.contains('serverius.nl'))",
  "comment": "",
  "order": "4380",
  "tag": "",
  "ddos_type": "greflood",
  "threat_level": "25",
  "num_unique_src_per_dst_24": "50",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'].isin([47])) & (df['genome.src'].isin([GENOME_HOSTING]))",
  "position_id": 135,
  "display_name": "greflood_from_hosting"
}{
  "gid": "136",
  "name": "tcpflood_syn_count_by_dst_from_hosting",
  "dfmatch": "(df['addr.dst:num_tcp_syn'] > 1000) & (df['tcpflags'].isin([TCP_S, TCP_SEC])) & (df['genome.src'].str.contains('hetzner.de') | df['genome.src'].str.contains('scaleway.com') | df['genome.src'].str.contains('ec2.amazonaws.com') | df['genome.src'].str.contains('cloud.google.com') | df['genome.src'].str.contains('datacamp.co.uk') | df['genome.src'].str.contains('ovh.com') | df['genome.src'].str.contains('i3d.net') | df['genome.src'].str.contains('fdcservers.net') | df['genome.src'].str.contains('m247.com') | df['genome.src'].str.contains('24shells.net') | df['genome.src'].str.contains('performive.com') | df['genome.src'].str.contains('hostinger.com') | df['genome.src'].str.contains('tube-hosting.com') | df['genome.src'].str.contains('cloud.yandex.com') | df['genome.src'].str.contains('interserver.net') | df['genome.src'].str.contains('66.to') | df['genome.src'].str.contains('ztv.su') | df['genome.src'].str.contains('quadranet.com') | df['genome.src'].str.contains('chosting.solutions') | df['genome.src'].str.contains('h4y.us') | df['genome.src'].str.contains('heficed.com') | df['genome.src'].str.contains('linode.com') | df['genome.src'].str.contains('colocrossing.com') | df['genome.src'].str.contains('cloud.ibm.com') | df['genome.src'].str.contains('buyvm.net') | df['genome.src'].str.contains('limestonenetworks.com') | df['genome.src'].str.contains('sapinet.fr') | df['genome.src'].str.contains('hostslick.de') | df['genome.src'].str.contains('nuxt.cloud') | df['genome.src'].str.contains('globalsecurelayer.com') | df['genome.src'].str.contains('stark-industries.solutions') | df['genome.src'].str.contains('clouvider.com') | df['genome.src'].str.contains('bluevps.com') | df['genome.src'].str.contains('serverius.nl'))",
  "comment": "",
  "order": "3705",
  "tag": "",
  "ddos_type": "synflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "20",
  "pps_per_dst_24": "10000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['addr.dst:num_tcp_syn'] > 1000) & (df['tcpflags'].isin([TCP_S, TCP_SEC])) & (df['genome.src'].isin([ GENOME_HOSTING ]))",
  "position_id": 136,
  "display_name": "tcpflood_syn_count_by_dst_from_hosting"
}{
  "gid": "137",
  "name": "udpflood_from_hosting_abuse",
  "dfmatch": "(df['protocol'] == 17) & (df['genome.src'].str.contains('stark-industries.solutions') | df['genome.src'].str.contains('buyvm.net') | df['genome.src'].str.contains('selectel.ru') | df['genome.src'].str.contains('rackray.com') | df['genome.src'].str.contains('packetexchange.eu') | df['genome.src'].str.contains('tzulo.com') | df['genome.src'].str.contains('blockchainnetworksolutions.co.uk') | df['genome.src'].str.contains('xorek.cloud')) & (df['port.src'] > 1024) & (df['port.dst'] > 1024) & (~df['genome.src'].str.contains('nordvpn.com') & ~df['genome.src'].str.contains('cyberghostvpn.com') & ~df['genome.src'].str.contains('discord.com') & ~df['genome.src'].str.contains('jitolabs') & ~df['genome.src'].str.contains('solana.com') & ~df['genome.src'].str.contains('triton.one') & ~df['genome.src'].str.contains('prometheus')) & (~df['genome.src'].str.contains('voip.windstream.com') & ~df['genome.src'].str.contains('voip.verizon.com') & ~df['genome.src'].str.contains('voip.charter.com') & ~df['genome.src'].str.contains('voip.level3.com') & ~df['genome.src'].str.contains('voip.comcast.com') & ~df['genome.src'].str.contains('voip.cogent.com') & ~df['genome.src'].str.contains('voip.evolveip.net') & ~df['genome.src'].str.contains('voip.tmobile.com') & ~df['genome.src'].str.contains('voip.telefonica.com') & ~df['genome.src'].str.contains('voip.att.com') & ~df['genome.src'].str.contains('peerlessnetwork.com') & ~df['genome.src'].str.contains('bandwidth.com') & ~df['genome.src'].str.contains('inteliquent.com') & ~df['genome.src'].str.contains('hypercube-llc.com') & ~df['genome.src'].str.contains('o1.com') & ~df['genome.src'].str.contains('382com.com') & ~df['genome.src'].str.contains('nos.com') & ~df['genome.src'].str.contains('excel.com') & ~df['genome.src'].str.contains('impacthostedpbx.com') & ~df['genome.src'].str.contains('aninetworks.com') & ~df['genome.src'].str.contains('vonage.com') & ~df['genome.src'].str.contains('brightlinkcom.com') & ~df['genome.src'].str.contains('idt.net')) & (( ~df['genome.dst'].str.contains('voip.windstream.com')) & ( ~df['genome.dst'].str.contains('voip.verizon.com')) & ( ~df['genome.dst'].str.contains('voip.charter.com')) & ( ~df['genome.dst'].str.contains('voip.level3.com')) & ( ~df['genome.dst'].str.contains('voip.comcast.com')) & ( ~df['genome.dst'].str.contains('voip.cogent.com')) & ( ~df['genome.dst'].str.contains('voip.evolveip.net')) & ( ~df['genome.dst'].str.contains('voip.tmobile.com')) & ( ~df['genome.dst'].str.contains('voip.telefonica.com')) & ( ~df['genome.dst'].str.contains('voip.att.com')) & ( ~df['genome.dst'].str.contains('peerlessnetwork.com')) & ( ~df['genome.dst'].str.contains('bandwidth.com')) & ( ~df['genome.dst'].str.contains('inteliquent.com')) & ( ~df['genome.dst'].str.contains('hypercube-llc.com')) & ( ~df['genome.dst'].str.contains('o1.com')) & ( ~df['genome.dst'].str.contains('382com.com')) & ( ~df['genome.dst'].str.contains('nos.com')) & ( ~df['genome.dst'].str.contains('excel.com')) & ( ~df['genome.dst'].str.contains('impacthostedpbx.com')) & ( ~df['genome.dst'].str.contains('aninetworks.com')) & ( ~df['genome.dst'].str.contains('vonage.com')) & ( ~df['genome.dst'].str.contains('brightlinkcom.com')) & ( ~df['genome.dst'].str.contains('idt.net'))) & (~df['port.src'].isin([4500,51820,5349]))",
  "comment": "Created to cater for hosting and cloud services regularly abused as part of DDoS\nException ports 4500 and 51820 due to SEC-273",
  "order": "4369",
  "tag": "",
  "ddos_type": "udpflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "15",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['genome.src'].isin([ GENOME_HOSTING_ABUSE ])) & (df['port.src'] > 1024) & (df['port.dst'] > 1024) & (~df['genome.src'].isin([ GENOME_EXCEPTION_UDP_FLOOD_HOSTING ])) & (~df['genome.src'].isin([ GENOME_EXCEPTION_VOIP ])) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_VOIP ])) & (~df['port.src'].isin([4500,51820,5349]))",
  "position_id": 137,
  "display_name": "udpflood_from_hosting_abuse"
}{
  "gid": "138",
  "name": "tcpflood_ack_from_hosting_abuse",
  "dfmatch": "(df['protocol'] == 6) & (df['genome.src'].str.contains('stark-industries.solutions') | df['genome.src'].str.contains('buyvm.net') | df['genome.src'].str.contains('selectel.ru') | df['genome.src'].str.contains('rackray.com') | df['genome.src'].str.contains('packetexchange.eu') | df['genome.src'].str.contains('tzulo.com') | df['genome.src'].str.contains('blockchainnetworksolutions.co.uk') | df['genome.src'].str.contains('xorek.cloud')) & (df['tcpflags'].isin([TCP_P, TCP_PA]))",
  "comment": "Created to cater for hosting and cloud services regularly abused as part of DDoS",
  "order": "4340",
  "tag": "",
  "ddos_type": "tcpackflood",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "15",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'] == 6) & (df['genome.src'].isin([ GENOME_HOSTING_ABUSE ])) & (df['tcpflags'].isin([TCP_P, TCP_PA]))",
  "position_id": 138,
  "display_name": "tcpflood_ack_from_hosting_abuse"
}{
  "gid": "139",
  "name": "secondary_dns_flood",
  "dfmatch": "(df['ddos24_packets_per'] > 40) & (df['protocol'] == 17) & (df['port.dst'].isin([53]))",
  "comment": "",
  "order": "10000",
  "tag": "require_999.0",
  "ddos_type": "udpflood",
  "threat_level": "100",
  "num_unique_src_per_dst_24": "1",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['ddos24_packets_per'] > 40) & (df['protocol'] == 17) & (df['port.dst'].isin([53]))",
  "position_id": 139,
  "display_name": "secondary_dns_flood"
}{
  "gid": "140",
  "name": "secondary_gre_flood",
  "dfmatch": "((df['ddos24_bytes_per'] > 40) | (df['ddos24_packets_per'] > 40)) & (df['protocol'] == 47) & (~df['genome.src'].str.contains('xfw.comcast.com')) & (( ~df['genome.dst'].str.contains('xfw.comcast.com')))",
  "comment": "See 7373",
  "order": "10100",
  "tag": "require_999.0",
  "ddos_type": "greflood",
  "threat_level": "100",
  "num_unique_src_per_dst_24": "1",
  "pps_per_dst_24": "1",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "((df['ddos24_bytes_per'] > 40) | (df['ddos24_packets_per'] > 40)) & (df['protocol'] == 47) & (~df['genome.src'].isin([ GENOME_EXCEPTION_GRE ])) & (~df['genome.dst'].isin([GENOME_EXCEPTION_GRE]))",
  "position_id": 140,
  "display_name": "secondary_gre_flood"
}{
  "gid": "141",
  "name": "secondary_bot_proxy",
  "dfmatch": "((df['ddos24_bytes_per'] > 40)  | (df['ddos24_packets_per'] > 40)) & ( (df['genome.src'].str.contains('tunnelbear.com') | df['genome.src'].str.contains('tor') | df['genome.src'].str.contains('sshplus') | df['genome.src'].str.contains('finevpn.org') | df['genome.src'].str.contains('nordvpn.com') | df['genome.src'].str.contains('torservers.net') | df['genome.src'].str.contains('surfeasy.com') | df['genome.src'].str.contains('hidemyass.com') | df['genome.src'].str.contains('cyberghostvpn.com') | df['genome.src'].str.contains('mullvad.net') | df['genome.src'].str.contains('vpn.opera.com') | df['genome.src'].str.contains('vpn.f-secure.com') | df['genome.src'].str.contains('surfshark.com') | df['genome.src'].str.contains('torproject.org') | df['genome.src'].str.contains('urban-vpn.com') | df['genome.src'].str.contains('unblock-us.com') | df['genome.src'].str.contains('vpn.avira.com') | df['genome.src'].str.contains('hide.me') | df['genome.src'].str.contains('airvpn.org') | df['genome.src'].str.contains('ovpn.com') | df['genome.src'].str.contains('fastestvpn.com') | df['genome.src'].str.contains('vpnunlimitedapp.com') | df['genome.src'].str.contains('ipvanish.com') | df['genome.src'].str.contains('pango.co') | df['genome.src'].str.contains('brightdata.com') | df['genome.src'].str.contains('soax.com') | df['genome.src'].str.contains('expressvpn.com') | df['genome.src'].str.contains('allsafevpn.com') | df['genome.src'].str.contains('ltesocks.xyz') | df['genome.src'].str.contains('proxylist') | df['genome.src'].str.contains('squid_cve') | df['genome.src'].str.contains('windscribe.com') | df['genome.src'].str.contains('possible_proxy') | df['genome.src'].str.contains('privateinternetaccess.com') | df['genome.src'].str.contains('touchvpn.net')) | (df['genome.src'].str.contains('proxy')) )",
  "comment": "Drop additional tor in 7371",
  "order": "10200",
  "tag": "require_999.0",
  "ddos_type": "botnet",
  "threat_level": "100",
  "num_unique_src_per_dst_24": "1",
  "pps_per_dst_24": "1",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "((df['ddos24_bytes_per'] > 40)  | (df['ddos24_packets_per'] > 40)) & ( (df['genome.src'].isin([ GENOME_PROXY_ABUSE ])) | (df['genome.src'].str.contains('proxy')) )",
  "position_id": 141,
  "display_name": "secondary_bot_proxy"
}{
  "gid": "142",
  "name": "secondary_udp_flood",
  "dfmatch": "((df['ddos24_bytes_per'] > 40) | (df['ddos24_packets_per'] > 40)) & (df['protocol'] == 17) & (df['port.src'] > 1024) & (df['port.dst'] > 1024) & (( ~df['genome.src'].str.contains('voip.windstream.com')) & ( ~df['genome.src'].str.contains('voip.verizon.com')) & ( ~df['genome.src'].str.contains('voip.charter.com')) & ( ~df['genome.src'].str.contains('voip.level3.com')) & ( ~df['genome.src'].str.contains('voip.comcast.com')) & ( ~df['genome.src'].str.contains('voip.cogent.com')) & ( ~df['genome.src'].str.contains('voip.evolveip.net')) & ( ~df['genome.src'].str.contains('voip.tmobile.com')) & ( ~df['genome.src'].str.contains('voip.telefonica.com')) & ( ~df['genome.src'].str.contains('voip.att.com')) & ( ~df['genome.src'].str.contains('peerlessnetwork.com')) & ( ~df['genome.src'].str.contains('bandwidth.com')) & ( ~df['genome.src'].str.contains('inteliquent.com')) & ( ~df['genome.src'].str.contains('hypercube-llc.com')) & ( ~df['genome.src'].str.contains('o1.com')) & ( ~df['genome.src'].str.contains('382com.com')) & ( ~df['genome.src'].str.contains('nos.com')) & ( ~df['genome.src'].str.contains('excel.com')) & ( ~df['genome.src'].str.contains('impacthostedpbx.com')) & ( ~df['genome.src'].str.contains('aninetworks.com')) & ( ~df['genome.src'].str.contains('vonage.com')) & ( ~df['genome.src'].str.contains('brightlinkcom.com')) & ( ~df['genome.src'].str.contains('idt.net'))) & (( ~df['genome.dst'].str.contains('voip.windstream.com')) & ( ~df['genome.dst'].str.contains('voip.verizon.com')) & ( ~df['genome.dst'].str.contains('voip.charter.com')) & ( ~df['genome.dst'].str.contains('voip.level3.com')) & ( ~df['genome.dst'].str.contains('voip.comcast.com')) & ( ~df['genome.dst'].str.contains('voip.cogent.com')) & ( ~df['genome.dst'].str.contains('voip.evolveip.net')) & ( ~df['genome.dst'].str.contains('voip.tmobile.com')) & ( ~df['genome.dst'].str.contains('voip.telefonica.com')) & ( ~df['genome.dst'].str.contains('voip.att.com')) & ( ~df['genome.dst'].str.contains('peerlessnetwork.com')) & ( ~df['genome.dst'].str.contains('bandwidth.com')) & ( ~df['genome.dst'].str.contains('inteliquent.com')) & ( ~df['genome.dst'].str.contains('hypercube-llc.com')) & ( ~df['genome.dst'].str.contains('o1.com')) & ( ~df['genome.dst'].str.contains('382com.com')) & ( ~df['genome.dst'].str.contains('nos.com')) & ( ~df['genome.dst'].str.contains('excel.com')) & ( ~df['genome.dst'].str.contains('impacthostedpbx.com')) & ( ~df['genome.dst'].str.contains('aninetworks.com')) & ( ~df['genome.dst'].str.contains('vonage.com')) & ( ~df['genome.dst'].str.contains('brightlinkcom.com')) & ( ~df['genome.dst'].str.contains('idt.net'))) & (( ~df['genome.src'].str.contains('nordvpn.com')) & ( ~df['genome.src'].str.contains('cyberghostvpn.com')) & ( ~df['genome.src'].str.contains('discord.com')) & ( ~df['genome.src'].str.contains('jitolabs')) & ( ~df['genome.src'].str.contains('solana.com')) & ( ~df['genome.src'].str.contains('triton.one')) & ( ~df['genome.src'].str.contains('prometheus')) & ( ~df['genome.src'].str.contains('zoom.us')) & ( ~df['genome.src'].str.contains('facebook.com')) & ( ~df['genome.src'].str.contains('whatsapp.com')) & ( ~df['genome.src'].str.contains('valve.com')) & ( ~df['genome.src'].str.contains('roblox.com')) & ( ~df['genome.src'].str.contains('telegram.org')) & ( ~df['genome.src'].str.contains('discord.com')) & ( ~df['genome.src'].str.contains('teams.microsoft.com')) & ( ~df['genome.src'].str.contains('tiktok.com')) & ( ~df['genome.src'].str.contains('playstation.com')) & ( ~df['genome.src'].str.contains('riotgames.com')))",
  "comment": "DDOS-206 / SEC-296",
  "order": "10300",
  "tag": "require_999.0",
  "ddos_type": "udpflood",
  "threat_level": "100",
  "num_unique_src_per_dst_24": "1",
  "pps_per_dst_24": "1",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "((df['ddos24_bytes_per'] > 40) | (df['ddos24_packets_per'] > 40)) & (df['protocol'] == 17) & (df['port.src'] > 1024) & (df['port.dst'] > 1024) & (~df['genome.src'].isin([ GENOME_EXCEPTION_VOIP ])) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_VOIP ])) & (~df['genome.src'].isin([ GENOME_EXCEPTION_SECONDARY_UDP_FLOOD ]))",
  "position_id": 142,
  "display_name": "secondary_udp_flood"
}{
  "gid": "143",
  "name": "secondary_ipip_flood_v4",
  "dfmatch": "((df['ddos24_bytes_per'] > 40)  | (df['ddos24_packets_per'] > 40)) & (df['ip_version'] == 4) & (df['protocol'] == 4)",
  "comment": "",
  "order": "10400",
  "tag": "require_999.0",
  "ddos_type": "ipipflood",
  "threat_level": "100",
  "num_unique_src_per_dst_24": "1",
  "pps_per_dst_24": "1",
  "bps_per_dst_24": "",
  "dfmatch_orig": "((df['ddos24_bytes_per'] > 40)  | (df['ddos24_packets_per'] > 40)) & (df['ip_version'] == 4) & (df['protocol'] == 4)",
  "position_id": 143,
  "display_name": "secondary_ipip_flood_v4"
}{
  "gid": "144",
  "name": "rdp_amplifier_port",
  "dfmatch": "(df['protocol'] == 17) & (df['port.src'].isin([3389]))",
  "comment": "",
  "order": "1780",
  "tag": "",
  "ddos_type": "rdp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "1000000",
  "detection_mitigation_rules": "18",
  "dfmatch_orig": "(df['protocol'] == 17) & (df['port.src'].isin([3389]))",
  "position_id": 144,
  "display_name": "rdp_amplifier_port"
}{
  "gid": "145",
  "name": "botnet_tcp_ack",
  "dfmatch": "(df['protocol'].isin([6])) & (df['tcpflags'].isin([TCP_A, TCP_PA])) & (df['genome.src'].str.contains('ddosbot')) & (( ~df['genome.dst'].str.contains('ookla.com')) & ( ~df['genome.dst'].str.contains('fastly.com')) & ( ~df['genome.dst'].str.contains('akamai.net')) & ( ~df['genome.dst'].str.contains('stackpath.com')) & ( ~df['genome.dst'].str.contains('edg.io')) & ( ~df['genome.dst'].str.contains('facebook.com')) & ( ~df['genome.dst'].str.contains('tiktok.com')) & ( ~df['genome.dst'].str.contains('openconnect.netflix.com')) & ( ~df['genome.dst'].str.contains('instagram.com')) & ( ~df['genome.dst'].str.contains('google.com')) & ( ~df['genome.dst'].str.contains('apple.com')) & ( ~df['genome.dst'].str.contains('icloud.apple.com')) & ( ~df['genome.dst'].str.contains('cloudcctv.uplus.co.kr')) & ( ~df['genome.dst'].str.contains('discord.com')) & ( ~df['genome.dst'].str.contains('roblox.com')) & ( ~df['genome.dst'].str.contains('alphonso.tv')) & ( ~df['genome.dst'].str.contains('cdn.flow.com.ar')) & ( ~df['genome.dst'].str.contains('telegram.org')))",
  "comment": "SEC-356",
  "order": "3110",
  "tag": "require_5.5",
  "ddos_type": "botnet",
  "threat_level": "",
  "num_unique_src_per_dst_24": "10",
  "pps_per_dst_24": "",
  "bps_per_dst_24": "500000000",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'].isin([6])) & (df['tcpflags'].isin([TCP_A, TCP_PA])) & (df['genome.src'].isin([ GENOME_BOTNET ])) & (~df['genome.dst'].isin([ GENOME_EXCEPTION_BOTNET ]))",
  "position_id": 145,
  "display_name": "botnet_tcp_ack"
}{
  "gid": "146",
  "name": "proxy_web",
  "dfmatch": "(df['protocol'].isin([6,17])) & (df['genome.dst'].str.contains('noname_target')) & ((df['genome.src'].str.contains('tunnelbear.com') | df['genome.src'].str.contains('tor') | df['genome.src'].str.contains('sshplus') | df['genome.src'].str.contains('finevpn.org') | df['genome.src'].str.contains('nordvpn.com') | df['genome.src'].str.contains('torservers.net') | df['genome.src'].str.contains('surfeasy.com') | df['genome.src'].str.contains('hidemyass.com') | df['genome.src'].str.contains('cyberghostvpn.com') | df['genome.src'].str.contains('mullvad.net') | df['genome.src'].str.contains('vpn.opera.com') | df['genome.src'].str.contains('vpn.f-secure.com') | df['genome.src'].str.contains('surfshark.com') | df['genome.src'].str.contains('torproject.org') | df['genome.src'].str.contains('urban-vpn.com') | df['genome.src'].str.contains('unblock-us.com') | df['genome.src'].str.contains('vpn.avira.com') | df['genome.src'].str.contains('hide.me') | df['genome.src'].str.contains('airvpn.org') | df['genome.src'].str.contains('ovpn.com') | df['genome.src'].str.contains('fastestvpn.com') | df['genome.src'].str.contains('vpnunlimitedapp.com') | df['genome.src'].str.contains('ipvanish.com') | df['genome.src'].str.contains('pango.co') | df['genome.src'].str.contains('brightdata.com') | df['genome.src'].str.contains('soax.com') | df['genome.src'].str.contains('expressvpn.com') | df['genome.src'].str.contains('allsafevpn.com') | df['genome.src'].str.contains('ltesocks.xyz') | df['genome.src'].str.contains('proxylist') | df['genome.src'].str.contains('squid_cve') | df['genome.src'].str.contains('windscribe.com') | df['genome.src'].str.contains('possible_proxy') | df['genome.src'].str.contains('privateinternetaccess.com') | df['genome.src'].str.contains('touchvpn.net')) | (df['genome.src'].str.contains('botscout') | df['genome.src'].str.contains('blacklists') | df['genome.src'].str.contains('blocklist') | df['genome.src'].str.contains('ipsum') | df['genome.src'].str.contains('malicious') | df['genome.src'].str.contains('telnetlogin') | df['genome.src'].str.contains('zeek') | df['genome.src'].str.contains('cleantalk') | df['genome.src'].str.contains('blocklist_net_ua')) | (df['genome.src'].str.contains('stark-industries.solutions') | df['genome.src'].str.contains('buyvm.net') | df['genome.src'].str.contains('selectel.ru') | df['genome.src'].str.contains('rackray.com') | df['genome.src'].str.contains('packetexchange.eu') | df['genome.src'].str.contains('tzulo.com') | df['genome.src'].str.contains('blockchainnetworksolutions.co.uk') | df['genome.src'].str.contains('xorek.cloud')) | (df['genome.src'].str.contains('spamhaus')))",
  "comment": "As per SEC-486 - TCP SYN rule for Bite deployment\nSEC-525: anonymize rule and allow dynamic updating of dest",
  "order": "3699",
  "tag": "",
  "ddos_type": "botnet",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "15",
  "pps_per_dst_24": "500",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['protocol'].isin([6,17])) & (df['genome.dst'].str.contains('noname_target')) & ((df['genome.src'].isin([ GENOME_PROXY_ABUSE ])) | (df['genome.src'].isin([ GENOME_REPUTATION_THIRDPARTY ])) | (df['genome.src'].isin([ GENOME_HOSTING_ABUSE ])) | (df['genome.src'].isin([ GENOME_SPAMHAUS ])))",
  "position_id": 146,
  "display_name": "proxy_web"
}{
  "gid": "147",
  "name": "dns_no_request",
  "dfmatch": "(df['payload'] == 1) & (df['protocol'] == 17) & (df['port.dst'] == 53) & ~((df['dns_query'].str.contains(\"A:\")) | (df['dns_query'].str.contains(\"AAAA:\")))",
  "comment": "Attempting to detect non-DNS request traffic going to UDP/53",
  "order": "1120",
  "tag": "require_999.0",
  "ddos_type": "udpflood",
  "threat_level": "5",
  "num_unique_src_per_dst_24": "20",
  "pps_per_dst_24": "10000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "(df['payload'] == 1) & (df['protocol'] == 17) & (df['port.dst'] == 53) & ~((df['dns_query'].str.contains(\"A:\")) | (df['dns_query'].str.contains(\"AAAA:\")))",
  "position_id": 147,
  "display_name": "dns_no_request"
}{
  "gid": "148",
  "name": "ntp_small_pkt",
  "dfmatch": "((df['protocol'] == 17) & (df['port.src'] == 123) & (df['avg_pktlen'] < 48))",
  "comment": "SEC-581",
  "order": "1360",
  "tag": "",
  "ddos_type": "ntp",
  "threat_level": "10",
  "num_unique_src_per_dst_24": "100",
  "pps_per_dst_24": "50000",
  "bps_per_dst_24": "",
  "detection_mitigation_rules": "",
  "dfmatch_orig": "((df['protocol'] == 17) & (df['port.src'] == 123) & (df['avg_pktlen'] < 48))",
  "position_id": 148,
  "display_name": "ntp_small_pkt"
}